<?xml version="1.0"?>
<doc>
    <assembly>
        <name>NTL_HIL</name>
    </assembly>
    <members>
        <member name="T:NTL_HIL.Cooking">
            <summary>
            <c>Cooking</c> class implements communication abstraction for Cooking category
            </summary>
            <summary>
            
            </summary>
            <summary>
            Cooking
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
        </member>
        <member name="P:NTL_HIL.Cooking.Target">
            <summary>
            
            </summary>
        </member>
        <member name="T:NTL_HIL.Cooking.Regulation">
            <summary>
            <c>Regulation</c> enum defines the regulations available in NKM file
            </summary>
        </member>
        <member name="F:NTL_HIL.Cooking.Regulation.GENERIC">
            <summary>            /// </summary>
        </member>
        <member name="F:NTL_HIL.Cooking.Regulation.SELECTOR">
            <summary>            /// </summary>
        </member>
        <member name="F:NTL_HIL.Cooking.Regulation.START">
            <summary>            /// </summary>
        </member>
        <member name="F:NTL_HIL.Cooking.Regulation.PAUSE">
            <summary>            /// </summary>
        </member>
        <member name="F:NTL_HIL.Cooking.Regulation.TEMPERATURE_CELSIUS_SELECTION">
            <summary>            /// </summary>
        </member>
        <member name="F:NTL_HIL.Cooking.Regulation.TEMPERATURE_FAHRENHEIT_SELECTION">
            <summary>            /// </summary>
        </member>
        <member name="F:NTL_HIL.Cooking.Regulation.USER_COOK_TIME_HH">
            <summary>            /// </summary>
        </member>
        <member name="F:NTL_HIL.Cooking.Regulation.USER_COOK_TIME_MM">
            <summary>            /// </summary>
        </member>
        <member name="F:NTL_HIL.Cooking.Regulation.MODE">
            <summary>            /// </summary>
        </member>
        <member name="F:NTL_HIL.Cooking.Regulation.SELECT">
            <summary>            /// </summary>
        </member>
        <member name="F:NTL_HIL.Cooking.Regulation.SWITCH_ON_OFF">
            <summary>            /// </summary>
        </member>
        <member name="F:NTL_HIL.Cooking.Regulation.ESCAPE">
            <summary>            /// </summary>
        </member>
        <member name="F:NTL_HIL.Cooking.Regulation.DELAY_HH">
            <summary>            /// </summary>
        </member>
        <member name="F:NTL_HIL.Cooking.Regulation.DELAY_MM">
            <summary>            /// </summary>
        </member>
        <member name="F:NTL_HIL.Cooking.Regulation.DELAY_SS">
            <summary>            /// </summary>
        </member>
        <member name="F:NTL_HIL.Cooking.Regulation.CONFIRM">
            <summary>            /// </summary>
        </member>
        <member name="F:NTL_HIL.Cooking.Regulation.CHILD_LOCK">
            <summary>            /// </summary>
        </member>
        <member name="F:NTL_HIL.Cooking.Regulation.DEMO_MODE">
            <summary>            /// </summary>
        </member>
        <member name="F:NTL_HIL.Cooking.Regulation.SOUND">
            <summary>            /// </summary>
        </member>
        <member name="F:NTL_HIL.Cooking.Regulation.CLOCK_HH">
            <summary>            /// </summary>
        </member>
        <member name="F:NTL_HIL.Cooking.Regulation.CLOCK_MM">
            <summary>            /// </summary>
        </member>
        <member name="F:NTL_HIL.Cooking.Regulation.TIMER_HH">
            <summary>            /// </summary>
        </member>
        <member name="F:NTL_HIL.Cooking.Regulation.TIMER_MM">
            <summary>            /// </summary>
        </member>
        <member name="F:NTL_HIL.Cooking.Regulation.TIMER_SS">
            <summary>            /// </summary>
        </member>
        <member name="F:NTL_HIL.Cooking.Regulation.BIT_OPTIONS">
            <summary>            /// </summary>
        </member>
        <member name="F:NTL_HIL.Cooking.Regulation.RAPID_PREHEAT">
            <summary>            /// </summary>
        </member>
        <member name="F:NTL_HIL.Cooking.Regulation.NEXT_PHASE">
            <summary>            /// </summary>
        </member>
        <member name="F:NTL_HIL.Cooking.Regulation.PREVIOUS_PHASE">
            <summary>            /// </summary>
        </member>
        <member name="F:NTL_HIL.Cooking.Regulation.NEXT_STEP">
            <summary>            /// </summary>
        </member>
        <member name="F:NTL_HIL.Cooking.Regulation.PREVIOUS_STEP">
            <summary>            /// </summary>
        </member>
        <member name="F:NTL_HIL.Cooking.Regulation.ADVANCE_PHASE">
            <summary>            /// </summary>
        </member>
        <member name="F:NTL_HIL.Cooking.Regulation.SERVICE_TEST">
            <summary>            /// </summary>
        </member>
        <member name="F:NTL_HIL.Cooking.Regulation.END_OF_LINE_TEST">
            <summary>            /// </summary>
        </member>
        <member name="F:NTL_HIL.Cooking.Regulation.SABBATH">
            <summary>            /// </summary>
        </member>
        <member name="F:NTL_HIL.Cooking.Regulation.CONNECTION_AND_SCHEDULING">
            <summary>            /// </summary>
        </member>
        <member name="F:NTL_HIL.Cooking.Regulation.SETTING_FILE">
            <summary>            /// </summary>
        </member>
        <member name="F:NTL_HIL.Cooking.Regulation.ENABLE_CONNECT_FUNCTIONALITY">
            <summary>            /// </summary>
        </member>
        <member name="F:NTL_HIL.Cooking.Regulation.UPO">
            <summary>            /// </summary>
        </member>
        <member name="T:NTL_HIL.Cooking.LoadId">
            <summary>
            <c>LoadId</c> enum defines all load availabe in NKM file
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:NTL_HIL.Cooking.LoadId.BAKE1" -->
        <!-- Badly formed XML comment ignored for member "F:NTL_HIL.Cooking.LoadId.BAKE2" -->
        <!-- Badly formed XML comment ignored for member "F:NTL_HIL.Cooking.LoadId.BROIL1" -->
        <!-- Badly formed XML comment ignored for member "F:NTL_HIL.Cooking.LoadId.BROIL2" -->
        <!-- Badly formed XML comment ignored for member "F:NTL_HIL.Cooking.LoadId.BROIL3" -->
        <!-- Badly formed XML comment ignored for member "F:NTL_HIL.Cooking.LoadId.BROIL4" -->
        <!-- Badly formed XML comment ignored for member "F:NTL_HIL.Cooking.LoadId.COOLING_FAN1" -->
        <!-- Badly formed XML comment ignored for member "F:NTL_HIL.Cooking.LoadId.CONVECTION_ELEMENT1" -->
        <!-- Badly formed XML comment ignored for member "F:NTL_HIL.Cooking.LoadId.CONVECTION_ELEMENT2" -->
        <!-- Badly formed XML comment ignored for member "F:NTL_HIL.Cooking.LoadId.CONVECTION_ELEMENT3" -->
        <!-- Badly formed XML comment ignored for member "F:NTL_HIL.Cooking.LoadId.CONVECTION_ELEMENT4" -->
        <!-- Badly formed XML comment ignored for member "F:NTL_HIL.Cooking.LoadId.CONVECTION_FAN1" -->
        <!-- Badly formed XML comment ignored for member "F:NTL_HIL.Cooking.LoadId.BROILER" -->
        <!-- Badly formed XML comment ignored for member "F:NTL_HIL.Cooking.LoadId.LIGHT1" -->
        <!-- Badly formed XML comment ignored for member "F:NTL_HIL.Cooking.LoadId.LATCH_MOTOR" -->
        <!-- Badly formed XML comment ignored for member "F:NTL_HIL.Cooking.LoadId.LEFT_REAR_HOB" -->
        <!-- Badly formed XML comment ignored for member "F:NTL_HIL.Cooking.LoadId.LEFT_FRONT_HOB" -->
        <!-- Badly formed XML comment ignored for member "F:NTL_HIL.Cooking.LoadId.RIGHT_REAR_HOB" -->
        <!-- Badly formed XML comment ignored for member "F:NTL_HIL.Cooking.LoadId.RIGHT_FRONT_HOB" -->
        <!-- Badly formed XML comment ignored for member "F:NTL_HIL.Cooking.LoadId.CENTER_REAR_HOB" -->
        <!-- Badly formed XML comment ignored for member "F:NTL_HIL.Cooking.LoadId.TURNSPIT" -->
        <!-- Badly formed XML comment ignored for member "F:NTL_HIL.Cooking.LoadId.CENTER_FRONT_HOB" -->
        <!-- Badly formed XML comment ignored for member "F:NTL_HIL.Cooking.LoadId.COOKTOP_WARM_ZONE" -->
        <!-- Badly formed XML comment ignored for member "F:NTL_HIL.Cooking.LoadId.GRIDDLE1" -->
        <!-- Badly formed XML comment ignored for member "F:NTL_HIL.Cooking.LoadId.GRIDDLE2" -->
        <!-- Badly formed XML comment ignored for member "F:NTL_HIL.Cooking.LoadId.DLB1" -->
        <!-- Badly formed XML comment ignored for member "F:NTL_HIL.Cooking.LoadId.DLB2" -->
        <!-- Badly formed XML comment ignored for member "F:NTL_HIL.Cooking.LoadId.DLB3" -->
        <!-- Badly formed XML comment ignored for member "F:NTL_HIL.Cooking.LoadId.DLB4" -->
        <!-- Badly formed XML comment ignored for member "F:NTL_HIL.Cooking.LoadId.DLB5" -->
        <!-- Badly formed XML comment ignored for member "F:NTL_HIL.Cooking.LoadId.DLB6" -->
        <!-- Badly formed XML comment ignored for member "F:NTL_HIL.Cooking.LoadId.CONVECTION_FAN1_X" -->
        <!-- Badly formed XML comment ignored for member "F:NTL_HIL.Cooking.LoadId.CONVECTION_FAN2" -->
        <!-- Badly formed XML comment ignored for member "F:NTL_HIL.Cooking.LoadId.CONVECTION_FAN3" -->
        <!-- Badly formed XML comment ignored for member "F:NTL_HIL.Cooking.LoadId.CONVECTION_FAN4" -->
        <!-- Badly formed XML comment ignored for member "F:NTL_HIL.Cooking.LoadId.COOLING_FAN1_X" -->
        <!-- Badly formed XML comment ignored for member "F:NTL_HIL.Cooking.LoadId.COOLING_FAN2" -->
        <!-- Badly formed XML comment ignored for member "F:NTL_HIL.Cooking.LoadId.LIGHT1_X" -->
        <!-- Badly formed XML comment ignored for member "F:NTL_HIL.Cooking.LoadId.LIGHT2" -->
        <!-- Badly formed XML comment ignored for member "F:NTL_HIL.Cooking.LoadId.LIGHT3" -->
        <!-- Badly formed XML comment ignored for member "F:NTL_HIL.Cooking.LoadId.DOORLOCK1" -->
        <!-- Badly formed XML comment ignored for member "F:NTL_HIL.Cooking.LoadId.DOORLOCK2" -->
        <!-- Badly formed XML comment ignored for member "F:NTL_HIL.Cooking.LoadId.DOOR_SWITCH_STROBE" -->
        <!-- Badly formed XML comment ignored for member "F:NTL_HIL.Cooking.LoadId.DOWNDRAFT" -->
        <!-- Badly formed XML comment ignored for member "F:NTL_HIL.Cooking.LoadId.ROTISSERIE" -->
        <!-- Badly formed XML comment ignored for member "F:NTL_HIL.Cooking.LoadId.TURNSPIT_X" -->
        <!-- Badly formed XML comment ignored for member "F:NTL_HIL.Cooking.LoadId.ACCESSORY1" -->
        <!-- Badly formed XML comment ignored for member "F:NTL_HIL.Cooking.LoadId.ACCESSORY2" -->
        <!-- Badly formed XML comment ignored for member "F:NTL_HIL.Cooking.LoadId.BOILER_VALVE_FILL" -->
        <!-- Badly formed XML comment ignored for member "F:NTL_HIL.Cooking.LoadId.ALL_LOADS" -->
        <member name="M:NTL_HIL.Cooking.SetExternalControl">
            <summary>
            API 11 : Uses API 11 to set acu to external control to be controlled by PC
            </summary>
        </member>
        <member name="M:NTL_HIL.Cooking.SetRegulation(System.Byte,System.Byte,System.Byte[])">
            <summary>
            Set regulation
            </summary>
            <param name="boardId">Board Id</param>
            <param name="regulationId">Regulation Id</param>
            <param name="param">Parameters required to set regulation</param>
        </member>
        <member name="M:NTL_HIL.Cooking.SetRegulation(System.Byte,System.Byte[])">
            <summary>
            
            </summary>
            <param name="target"></param>
            <param name="param"></param>
        </member>
        <member name="M:NTL_HIL.Cooking.Init(System.String,System.Byte)">
            <summary>
            Setting and initializing communication port
            </summary>
            <param name="comPort">Port name by which CCB2 device is connected</param>
            <param name="deviceAddress">Device address to set</param>
        </member>
        <member name="M:NTL_HIL.Cooking.GetRegulationsData(System.Byte,System.Int32)">
            <summary>
            Gets the regulations data
            </summary>
            <param name="boardId">The target</param>
            <param name="waitTimeInSec">Time in secs</param>
            <returns>Byte array</returns>
        </member>
        <member name="M:NTL_HIL.Cooking.GetNumberOfCycle(System.Byte,System.Int32)">
            <summary>
            Gets the number of cycle
            </summary>
            <param name="boardId">The target</param>
            <param name="waitTimeInSec">Time in secs</param>
            <returns>Byte</returns>
        </member>
        <member name="M:NTL_HIL.Cooking.GetRegulationById(System.Byte,System.Byte,System.Int32)">
            <summary>
            Gets the regulation by identifier
            </summary>
            <param name="boardId">The target</param>
            <param name="functionId">The function identifier</param>
            <param name="waitTimeInSec">Time in secs</param>
            <returns>Byte</returns>
        </member>
        <member name="M:NTL_HIL.Cooking.GetStatusData(System.Byte,System.Int32)">
            <summary>
            Gets the status data
            </summary>
            <param name="boardId">The target</param>
            <param name="waitTimeInSec">Time in secs</param>
            <returns>Byte array</returns>
        </member>
        <member name="M:NTL_HIL.Cooking.GetSystemMode(System.Byte,System.Int32)">
            <summary>
            Get system mode
            </summary>
            <param name="boardId">Board Id</param>
            <param name="waitTimeInSec">Time in secs</param>
            <returns></returns>
        </member>
        <member name="M:NTL_HIL.Cooking.GetStatusStructure(System.Byte,System.Int32)">
            <summary>
            Gets the status structure
            </summary>
            <param name="boardId">The target</param>
            <param name="waitTimeInSec">Time in secs</param>
            <returns>Byte array</returns>
        </member>
        <member name="M:NTL_HIL.Cooking.SetSystemMode(System.Byte,NTL.EnumModeType,NTL.EnumSubModeType)">
            <summary>
            Sets the system mode.
            </summary>
            <param name="target">The target.</param>
            <param name="mode">The mode.</param>
            <param name="subMode">The sub mode.</param>
        </member>
        <member name="M:NTL_HIL.Cooking.StartLog(System.String)">
            <summary>
            
            </summary>
            <param name="path"></param>
        </member>
        <member name="M:NTL_HIL.Cooking.StopLog">
            <summary>
            
            </summary>
        </member>
        <member name="M:NTL_HIL.Cooking.SendRevealMessage(System.Byte,System.Byte[],System.Boolean,System.Double)">
            <summary>
            Sends raw reveal message on bus
            </summary>
            <param name="boardId">Board id</param>
            <param name="data">Packet to send on bus</param>
            <param name="blockingExecution">Optional parameter</param>
            <param name="timeout">Optional parameter</param>
            <returns>Returns bool</returns>
        </member>
        <member name="M:NTL_HIL.Cooking.ReadClientData(WhirlpoolCommunication.Packets.SimpleWhirlpoolPacket,System.Int32,WhirlpoolCommunication.Packets.SimpleWhirlpoolPacket)">
            <summary>
            
            </summary>
            <param name="desiredData"></param>
            <param name="waitTimeInSec"></param>
            <param name="maskData"></param>
            <returns></returns>
        </member>
        <member name="M:NTL_HIL.Cooking.ReadClientData(WhirlpoolCommunication.Packets.SimpleWhirlpoolPacket,WhirlpoolCommunication.Packets.SimpleWhirlpoolPacket)">
            <summary>
            
            </summary>
            <param name="desiredData"></param>
            <param name="maskData"></param>
            <returns></returns>
        </member>
        <member name="M:NTL_HIL.Cooking.ReadClientDataLatest(WhirlpoolCommunication.Packets.SimpleWhirlpoolPacket,System.Int32)">
            <summary>
            
            </summary>
            <param name="desiredData"></param>
            <param name="waitTimeInSec"></param>
            <returns></returns>
        </member>
        <member name="M:NTL_HIL.Cooking.ReadClientDataLatest(WhirlpoolCommunication.Packets.SimpleWhirlpoolPacket,WhirlpoolCommunication.Packets.SimpleWhirlpoolPacket,System.Int32)">
            <summary>
            
            </summary>
            <param name="desiredData"></param>
            <param name="maskData"></param>
            <param name="waitTimeInSec"></param>
            <returns></returns>
        </member>
        <member name="M:NTL_HIL.Cooking.PublishFaultCode(System.Byte,System.Byte,System.Int32)">
            <summary>
            
            </summary>
            <param name="target"></param>
            <param name="faultindex"></param>
            <param name="waitTimeInSec"></param>
            <returns></returns>
        </member>
        <member name="M:NTL_HIL.Cooking.SetLoad(System.Byte,System.Byte,NTL_HIL.NTL_HIL.SetState,System.Byte)">
            <summary>
            Low level interface : to control specific load provided as per parameters
            Opcode 0x01
            </summary>
            <param name="boardId">Board node id</param>
            <param name="loadName">Load name. For example : loadName = Cooking.LOADID.DLB1 for DLB1, Cooking.LOADID.Bake1 for Bake1</param>
            <param name="state">Load state. For example : state = Cooking.SETSTATE.ON, Cooking.SETSTATE.OFF</param>
            <param name="loadSize">Load size</param>
            <remarks></remarks>
        </member>
        <member name="M:NTL_HIL.Cooking.SetLoad(System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Low level interface : to control specific load provided as per parameters
            Opcode 0x01
            </summary>
            <param name="boardId">Board node id</param>
            <param name="loadId">Load id by index</param>
            <param name="loadSize">Load size</param>
            <param name="state">Load state</param>
        </member>
        <member name="M:NTL_HIL.Cooking.GetLoadData(System.Byte,System.Byte)">
            <summary>
            API Low level : get load data
            Opcode 0x02
            </summary>
            <param name="boardId">Board id</param>
            <param name="loadId">Load id by index</param>
            <returns>Byte array</returns>
        </member>
        <member name="M:NTL_HIL.Cooking.GetLoadData(System.Byte,System.Byte,System.Int32)">
             /// <summary>
            API Low level : get load data
            Opcode 0x02
            </summary>
            <param name="boardId">Board id</param>
            <param name="loadName">Load name. For example : loadName = Cooking.LOADID.DLB1 for DLB1, Cooking.LOADID.Bake1 for Bake1</param>
            <param name="waitTimeInSec">Time in secs</param>
            <returns>Byte array</returns>
        </member>
        <member name="M:NTL_HIL.Cooking.RequestLliData(System.Byte,System.Byte,System.Byte,System.Int32)">
            <summary>
            Gets the lli data
            Opocode 0x03
            </summary>
            <param name="boardId">The boardId</param>
            <param name="lliType">Type of the lli</param>
            <param name="lliPosition">The lli position</param>
            <param name="waitTimeInSec">Time in secs</param>
            <returns>Byte array</returns>
        </member>
        <member name="M:NTL_HIL.Cooking.RequestGIData(System.Byte,System.Byte,System.Int32)">
            <summary>
            Gets the gi data
            Opocode 0x04
            </summary>
            <param name="boardId">The boardId</param>
            <param name="giID">The gi identifier</param>
            <param name="waitTimeInSec">Time in secs</param>
            <returns>Byte array</returns>
        </member>
        <member name="M:NTL_HIL.Cooking.RequestAllLoadConfiguration(System.Byte,System.Int32)">
            <summary>
            Not validated
            Opocode 0x05
            </summary>
            <param name="boardId">Board Id</param>
            <param name="waitTimeInSec">Time in secs</param>
            <returns></returns>
        </member>
        <member name="M:NTL_HIL.Cooking.RequestAllLliConfiguration(System.Byte,System.Int32)">
            <summary>
            Not validated
            Opocode 0x06
            </summary>
            <param name="boardId">Board Id</param>
            <param name="waitTimeInSec">Time in secs</param>
            <returns></returns>
        </member>
        <member name="M:NTL_HIL.Cooking.RequestAllGiConfiguration(System.Byte,System.Int32)">
            <summary>
            Not validated
            Opocode 0x07
            </summary>
            <param name="boardId">Board Id</param>
            <param name="waitTimeInSec">Time in secs</param>
            <returns></returns>
        </member>
        <member name="M:NTL_HIL.Cooking.TurnAllLoadsOff(System.Byte)">
            <summary>
            Sets all load off
            Opocode 0x11
            </summary>
            <param name="boardId">Board id</param>
            <returns></returns>
        </member>
        <member name="M:NTL_HIL.Cooking.SetDebugLabel(System.Byte,System.Byte,System.String)">
            <summary>
            Sets the debuglabel
            Opocode 0x12
            </summary>
            <param name="boardId">The boardId</param>
            <param name="debugFunctionIndex">Index of the debug function</param>
            <param name="label">The label</param>
            <returns></returns> 
        </member>
        <member name="M:NTL_HIL.Cooking.EngageTestCycle(System.Byte,System.Byte)">
            <summary>
            Not validated
            Opocode 0x1B
            </summary>
            <param name="boardId"></param>
            <param name="testCycle"></param>
        </member>
        <member name="M:NTL_HIL.Cooking.HmiPlaySound(System.Byte,System.Byte,System.Byte)">
            <summary>
            Not validated
            Opocode 0x15
            </summary>
            <param name="boardId"></param>
            <param name="soundIndex"></param>
            <param name="volume"></param>
        </member>
        <member name="M:NTL_HIL.Cooking.HmiSetObject(System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Not validated
            Opocode 0x14
            </summary>
            <param name="boardId"></param>
            <param name="objectType"></param>
            <param name="objectIndex"></param>
            <param name="objectValue"></param>
        </member>
        <member name="M:NTL_HIL.Cooking.PhaseTestCycle(System.Byte,System.Byte)">
            <summary>
            Not validated
            Opocode 0x1C
            </summary>
            <param name="boardId"></param>
            <param name="testPhaseCycle"></param>
        </member>
        <member name="M:NTL_HIL.Cooking.SetDebugVariable(System.Byte,System.Byte,System.Byte[])">
            <summary>
            Not validated
            Opocode 0x13
            </summary>
            <param name="boardId"></param>
            <param name="debugFunctionIndex"></param>
            <param name="varaiableValue"></param>
        </member>
        <member name="M:NTL_HIL.Cooking.SetExtractGIs(System.Byte,System.Byte)">
            <summary>
            Not validated
            Opocode 0x1E
            </summary>
            <param name="boardId"></param>
            <param name="extractGIsState"></param>
        </member>
        <member name="M:NTL_HIL.Cooking.SetExtractLoads(System.Byte,System.Byte)">
            <summary>
            Not validated
            Opocode 0x1D
            </summary>
            <param name="boardId"></param>
            <param name="extractLoadState"></param>
        </member>
        <member name="M:NTL_HIL.Cooking.SetTestStorage(System.Byte,System.Byte)">
            <summary>
            Not validated
            Opocode 0x1A
            </summary>
            <param name="boardId"></param>
            <param name="storage"></param>
        </member>
        <member name="M:NTL_HIL.Cooking.ProductTypes(System.IO.Stream)">
            <summary>
            Read NKM XML file and get product type
            </summary>
            <param name="XMLStream">XML file</param>
            <returns>Product type refernce containing all data</returns>
        </member>
        <member name="M:NTL_HIL.Cooking.PilotType(System.IO.Stream)">
            <summary>
            Read NKM XML file and get pilot type
            </summary>
            <param name="XMLStream">XML file</param>
            <returns>Pilot type refernce containing all data</returns>
        </member>
        <member name="M:NTL_HIL.Cooking.LoadsList(System.IO.Stream)">
            <summary>
            Read NKM XML file and get load list
            </summary>
            <param name="XMLStream">XML file</param>
            <returns>Load list refernce containing all data</returns>
        </member>
        <member name="M:NTL_HIL.Cooking.LowLevelInputList(System.IO.Stream)">
            <summary>
            Read NKM XML file and get low level input info
            </summary>
            <param name="XMLStream">XML file</param>
            <returns>Low level input info refernce containing all data</returns>
        </member>
        <member name="M:NTL_HIL.Cooking.GenericInputList(System.IO.Stream)">
            <summary>
            Read NKM XML file and get generic input info
            </summary>
            <param name="XMLStream">XML file</param>
            <returns>Generic input info refernce containing all data</returns>
        </member>
        <member name="M:NTL_HIL.Cooking.RegulationsList(System.IO.Stream)">
            <summary>
            Read NKM XML file and regulations list
            </summary>
            <param name="XMLStream">XML file</param>
            <returns>Regulations list refernce containing all data</returns>
        </member>
        <member name="M:NTL_HIL.Cooking.CyclesList(System.IO.Stream)">
            <summary>
            Read NKM XML file and cycles list
            </summary>
            <param name="XMLStream">XML file</param>
            <returns>Cycles list refernce containing all data</returns>
        </member>
        <member name="M:NTL_HIL.Cooking.FaultsList(System.IO.Stream)">
            <summary>
            Read NKM XML file and fault list
            </summary>
            <param name="XMLStream">XML file</param>
            <returns>Fault list refernce containing all data</returns>
        </member>
        <member name="M:NTL_HIL.Cooking.RequestApplianceData(System.Byte)">
            <summary>
            Gets the appliancedata
            </summary>
            <param name="boardId">Board Id</param>
            <returns></returns>
        </member>
        <member name="M:NTL_HIL.Cooking.RequestBoardData(System.Byte,System.Byte)">
            <summary>
            Gets the board data
            </summary>
            <param name="boardId">Board Id</param>
            <param name="boardIndex">Board Index</param>
            <returns></returns>
        </member>
        <member name="M:NTL_HIL.Cooking.RequestProjectData(System.Byte,System.Byte,System.Byte)">
            <summary>
            Gets the project data
            </summary>
            <param name="boardId">Board Id</param>
            <param name="boardIndex">Index of the board</param>
            <param name="projectIndex">Index of the project</param>
            <returns></returns>
        </member>
        <member name="M:NTL_HIL.Cooking.RequestServiceData(System.Byte,System.Int32)">
            <summary>
            
            </summary>
            <param name="boardId"></param>
            <param name="waitTimeInSec"></param>
            <returns></returns>
        </member>
        <member name="M:NTL_HIL.Cooking.RequestEolData(System.Byte,System.Byte,System.Int32)">
            <summary>
            
            </summary>
            <param name="boardId"></param>
            <param name="eolIndex"></param>
            <param name="waitTimeInSec"></param>
            <returns></returns>
        </member>
        <member name="M:NTL_HIL.Cooking.RequestFVTData(System.Byte,System.Byte,System.Int32)">
            <summary>
            
            </summary>
            <param name="boardId"></param>
            <param name="fvtIndex"></param>
            <param name="waitTimeInSec"></param>
            <returns></returns>
        </member>
        <member name="M:NTL_HIL.Cooking.RequestClassBSignature(System.Byte,System.Int32)">
            <summary>
            
            </summary>
            <param name="boardId"></param>
            <param name="waitTimeInSec"></param>
            <returns></returns>
        </member>
        <member name="M:NTL_HIL.Cooking.RequestCalibrationData(System.Byte,System.Byte,System.Int32)">
            <summary>
            
            </summary>
            <param name="boardId"></param>
            <param name="calibrationDataId"></param>
            <param name="waitTimeInSec"></param>
            <returns></returns>
        </member>
        <member name="M:NTL_HIL.Cooking.SetBoardData(System.Byte,System.Byte,System.String,System.String,System.String,System.Byte,System.Byte)">
            <summary>
            Sets the board data
            </summary>
            <param name="boardId">Board Id</param>
            <param name="boardIndex">Board index</param>
            <param name="boardPartNumber">Board part number</param>
            <param name="boardRevision">Board revision</param>
            <param name="boardSerialNumber">Board serial number</param>
            <param name="boardReplacment">Board replacement</param>
            <param name="boardNumberOfProjects">Number of projects</param>
        </member>
        <member name="M:NTL_HIL.Cooking.SetEolData(System.Byte,System.Byte,System.Byte,System.String,System.String,System.String)">
            <summary>
            Sets the eol data
            </summary>
            <param name="boardId">Board Id</param>
            <param name="eolIndex">EOL index</param>
            <param name="eolId">EOL Id</param>
            <param name="eolTesterVersion">EOL test version</param>
            <param name="eolTestDate">EOL test date</param>
            <param name="eolTestResult">EOL test result</param>
        </member>
        <member name="M:NTL_HIL.Cooking.SetEolDataBytes(System.Byte,System.Byte,System.String,System.String)">
            <summary>
            Sets the eol data bytes
            </summary>
            <param name="boardId">Board Id</param>
            <param name="eolIndex">EOL index</param>
            <param name="eolTestResult">EOL test result</param>
            <param name="eolTestResultMask">EOL test result mask</param>
        </member>
        <member name="M:NTL_HIL.Cooking.SetFvtData(System.Byte,System.Byte,System.Byte,System.String,System.String,System.String)">
            <summary>
            Sets the FVT data
            </summary>
            <param name="boardId">Board Id</param>
            <param name="fvtIndex">FVT index</param>
            <param name="fvtId">FVT Id</param>
            <param name="fvtTesterVersion">FVT test version</param>
            <param name="fvtTestDate">FVT test date</param>
            <param name="fvtTestResult">FVT test result</param>
        </member>
        <member name="M:NTL_HIL.Cooking.SetFvtDataBytes(System.Byte,System.Byte,System.String,System.String)">
            <summary>
            Sets the FVT data bytes
            </summary>
            <param name="boardId">Board Id</param>
            <param name="fvtIndex">FVT index</param>
            <param name="fvtTestResult">FVT test result</param>
            <param name="fvtTestResultMask">FVT test result mask</param>
        </member>
        <member name="M:NTL_HIL.Cooking.SetServiceData(System.Byte,System.Byte,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Sets the serice data
            </summary>
            <param name="boardId">Board Id</param>
            <param name="serviceTesterId">Service tester Id</param>
            <param name="serviceTesterVersion">Service tester version</param>
            <param name="serviceTestDate">Service tester date</param>
            <param name="serviceTestAge">Service test age</param>
            <param name="serviceTestDuration">Service test duration</param>
            <param name="serviceTestResult">Service test result</param>
        </member>
        <member name="M:NTL_HIL.Cooking.StoreStaticData(System.Byte)">
            <summary>
            Stores the staticdata
            </summary>
            <param name="boardId">Board Id</param>
        </member>
        <member name="M:NTL_HIL.Cooking.SetApplianceData(System.Byte,System.String,System.String,System.Byte)">
            <summary>
            Sets the appliance data
            </summary>
            <param name="boardId">Board Id</param>
            <param name="modelNumber">Model number</param>
            <param name="serialNumber">Serial number</param>
            <param name="numberOfBoards">Number of boards</param>
        </member>
        <member name="T:NTL_HIL.Cooking.OvenSystemVariable">
            <summary>
            
            </summary>
        </member>
        <member name="T:NTL_HIL.Cooking.MicrowaveSystemVariable">
            <summary>
            
            </summary>
        </member>
        <member name="T:NTL_HIL.Cooking.DataType">
            <summary>/// /// </summary>
        </member>
        <member name="F:NTL_HIL.Cooking.DataType.U8">
            <summary>/// /// </summary>
        </member>
        <member name="F:NTL_HIL.Cooking.DataType.U16">
            <summary>/// /// </summary>
        </member>
        <member name="F:NTL_HIL.Cooking.DataType.U32">
            <summary>/// /// </summary>
        </member>
        <member name="F:NTL_HIL.Cooking.DataType.U64">
            <summary>/// /// </summary>
        </member>
        <member name="F:NTL_HIL.Cooking.DataType.S8">
            <summary>/// /// </summary>
        </member>
        <member name="F:NTL_HIL.Cooking.DataType.S16">
            <summary>/// /// </summary>
        </member>
        <member name="F:NTL_HIL.Cooking.DataType.S32">
            <summary>/// /// </summary>
        </member>
        <member name="F:NTL_HIL.Cooking.DataType.S64">
            <summary>/// /// </summary>
        </member>
        <member name="M:NTL_HIL.Cooking.RequestSpecificVariable(System.Byte,System.Byte,System.Int32)">
            <summary>
            Get specific variable
            </summary>
            <param name="boardId">Board Id</param>
            <param name="index">Index</param>
            <param name="waitTimeInSec">Time in secs</param>
            <returns>Byte array</returns>
        </member>
        <member name="M:NTL_HIL.Cooking.RequestSpecificVariable(System.Byte,System.Byte,NTL_HIL.Cooking.DataType,System.Byte)">
            <summary>
            Request specific variable as per varibale id
            </summary>
            <param name="boardId">ACU node ID</param>
            <param name="variableId">Variable name from NKMParser.dll</param>
            <param name="offset">Position of the expected data</param>
            <param name="dataType">Data type</param>
            <returns>Returns array if offset is not provided or wrong offset provided\nReturns single value when offset sent withing limits</returns>
        </member>
        <member name="M:NTL_HIL.Cooking.GetData(System.Byte[],System.Byte,System.Byte)">
            <summary>
            
            </summary>
            <param name="payload"></param>
            <param name="offset"></param>
            <param name="numberOfBytes"></param>
            <returns></returns>
        </member>
        <member name="M:NTL_HIL.Cooking.RequestSpecificVariable(System.String)">
            <summary>
            
            </summary>
            <param name="variablename"></param>
            <returns></returns>
        </member>
        <member name="M:NTL_HIL.Cooking.ReadSelectedVariableXML(System.String)">
            <summary>
            
            </summary>
            <param name="path"></param>
        </member>
        <member name="M:NTL_HIL.Cooking.RegisterVariables">
            <summary>
            
            </summary>
        </member>
        <member name="M:NTL_HIL.Cooking.RegisterVariables(System.UInt32[])">
            <summary>
            
            </summary>
            <param name="exclusivelist"></param>
        </member>
        <member name="M:NTL_HIL.Cooking.RequestAcquisitionConfiguration(System.Byte)">
            <summary>
            Request acquisition configuration
            </summary>
            <param name="boardId">Board id</param>
        </member>
        <member name="M:NTL_HIL.Cooking.PublishAcquisitionConfiguration(System.Byte,System.Int32)">
            <summary>
            Publish acquisition configuration
            </summary>
            <param name="boardId">Board Id</param>
            <param name="waitTimeInSec">Time in secs</param>
            <returns>Byte array</returns>
        </member>
        <member name="M:NTL_HIL.Cooking.RequestFixedVariableMetadata(System.Byte,System.Byte)">
            <summary>
            Request fixed vairable metadata
            </summary>
            <param name="boardId">Board id</param>
            <param name="index">Index</param>
        </member>
        <member name="M:NTL_HIL.Cooking.PublishFixedVariableMedata(System.Byte,System.Byte,System.Int32)">
            <summary>
            Publish fixed variable metadata
            </summary>
            <param name="boardId">Board Id</param>
            <param name="waitTimeInSec">Time in secs</param>
            <param name="index">Index</param>
            <returns>Byte array</returns>
        </member>
        <member name="M:NTL_HIL.Cooking.PublishStreamData(System.Byte,System.Byte,System.Byte,System.Int32)">
            <summary>
            
            </summary>
            <param name="boardId"></param>
            <param name="lsb"></param>
            <param name="msb"></param>
            <param name="waitTimeInSec"></param>
            <returns></returns>
        </member>
        <member name="M:NTL_HIL.Cooking.RequestNumberOfVariables(System.Byte)">
            <summary>
            Request number of variable
            </summary>
            <param name="boardId">Board id</param>
        </member>
        <member name="M:NTL_HIL.Cooking.PublishNumberOfVariables(System.Byte,System.Int32)">
            <summary>
            Publish number of variables
            </summary>
            <param name="boardId">Board Id</param>
            <param name="waitTimeInSec">Time in secs</param>
            <returns>Byte array</returns>
        </member>
        <member name="M:NTL_HIL.Cooking.ConfigureOnChangeBehavior(System.Byte,System.Byte,System.Byte)">
            <summary>
            Configure on change behavior
            </summary>
            <param name="boardId">Board Id</param>
            <param name="index">Index</param>
            <param name="onChangeBehavior">On change behavior</param>
        </member>
        <member name="M:NTL_HIL.Cooking.DefineMemoryMappedVariable(System.Byte,System.Byte[])">
            <summary>
            Define memory mapped variable
            </summary>
            <param name="boardId">Board Id</param>
            <param name="listofMemoryMapVariable">List of memory map variable</param>
        </member>
        <member name="M:NTL_HIL.Cooking.DeselectAllVariables(System.Byte)">
            <summary>
            Deselect all variables
            </summary>
            <param name="boardId">Board id</param>
        </member>
        <member name="M:NTL_HIL.Cooking.DeselectSpecificVariables(System.Byte,System.Byte[])">
            <summary>
            Deselect specific variabes
            </summary>
            <param name="boardId">Board id</param>
            <param name="listofVariables">List of vaiables</param>
        </member>
        <member name="M:NTL_HIL.Cooking.EnablePeriodicData(System.Byte,System.Byte)">
            <summary>
            Enable periodic data
            </summary>
            <param name="boardId">Board id</param>
            <param name="startStop">Start/Stop</param>
        </member>
        <member name="M:NTL_HIL.Cooking.SelectAllVariables(System.Byte)">
            <summary>
            Select all variables
            </summary>
            <param name="boardId">Board id</param>
        </member>
        <member name="M:NTL_HIL.Cooking.SelectSpecificVariables(System.Byte,System.Byte[])">
            <summary>
            Select specific variables
            </summary>
            <param name="boardId">Board id</param>
            <param name="listofVariables">List of variables</param>
        </member>
        <member name="M:NTL_HIL.Cooking.SetPeriodicPublication(System.Byte,System.Byte,System.Byte)">
            <summary>
            Set periodic publication
            </summary>
            <param name="boardId">Board id</param>
            <param name="method">Method</param>
            <param name="millisecondPeriod">Time in millisecseonds</param>
        </member>
        <member name="M:NTL_HIL.Cooking.UndefineMemoryMappedVariable(System.Byte,System.Byte[])">
            <summary>
            Undefine memory mapped variable
            </summary>
            <param name="boardId">Board id</param>
            <param name="listofMemoryMapVariable">List of memory map variable</param>
        </member>
        <member name="M:NTL_HIL.Cooking.WriteFixedVariable(System.Byte,System.Byte[])">
            <summary>
            Write fixed varaibles
            </summary>
            <param name="boardId">Board id</param>
            <param name="listofMemoryMapVariable">List of memory map variable</param>
        </member>
        <member name="T:NTL_HIL.Dryer">
            <summary>
            
            </summary>
            <summary>
            
            </summary>
        </member>
        <member name="P:NTL_HIL.Dryer.Target">
            <summary>
            
            </summary>
        </member>
        <member name="T:NTL_HIL.Dryer.LOADID">
            <summary>
            
            </summary>
        </member>
        <member name="T:NTL_HIL.Dryer.Regulation">
            <summary>
            
            </summary>
        </member>
        <member name="M:NTL_HIL.Dryer.SetExternalControl">
            <summary>
            API 11 : Uses API 11 to set acu to external control to be controlled by PC
            </summary>
        </member>
        <member name="M:NTL_HIL.Dryer.SetRegulation(System.Byte,System.Byte,System.Byte[])">
            <summary>
            Set regulation
            </summary>
            <param name="boardId">Board Id</param>
            <param name="regulationId">Regulation Id</param>
            <param name="param">Parameters required to set regulation</param>
        </member>
        <member name="M:NTL_HIL.Dryer.SetRegulation(System.Byte,System.Byte[])">
            <summary>
            
            </summary>
            <param name="target"></param>
            <param name="param"></param>
        </member>
        <member name="M:NTL_HIL.Dryer.Init(System.String,System.Byte)">
            <summary>
            Setting and initializing communication port
            </summary>
            <param name="comPort">Port name by which CCB2 device is connected</param>
            <param name="deviceAddress">Device address to set</param>
        </member>
        <member name="M:NTL_HIL.Dryer.GetRegulationsData(System.Byte,System.Int32)">
            <summary>
            Gets the regulations data
            </summary>
            <param name="boardId">The target</param>
            <param name="waitTimeInSec">Time in secs</param>
            <returns>Byte array</returns>
        </member>
        <member name="M:NTL_HIL.Dryer.GetNumberOfCycle(System.Byte,System.Int32)">
            <summary>
            Gets the number of cycle
            </summary>
            <param name="boardId">The target</param>
            <param name="waitTimeInSec">Time in secs</param>
            <returns>Byte</returns>
        </member>
        <member name="M:NTL_HIL.Dryer.GetRegulationById(System.Byte,System.Byte,System.Int32)">
            <summary>
            Gets the regulation by identifier
            </summary>
            <param name="boardId">The target</param>
            <param name="functionId">The function identifier</param>
            <param name="waitTimeInSec">Time in secs</param>
            <returns>Byte</returns>
        </member>
        <member name="M:NTL_HIL.Dryer.GetStatusData(System.Byte,System.Int32)">
            <summary>
            Gets the status data
            </summary>
            <param name="boardId">The target</param>
            <param name="waitTimeInSec">Time in secs</param>
            <returns>Byte array</returns>
        </member>
        <member name="M:NTL_HIL.Dryer.GetSystemMode(System.Byte,System.Int32)">
            <summary>
            Get system mode
            </summary>
            <param name="boardId">Board Id</param>
            <param name="waitTimeInSec">Time in secs</param>
            <returns></returns>
        </member>
        <member name="M:NTL_HIL.Dryer.GetStatusStructure(System.Byte,System.Int32)">
            <summary>
            Gets the status structure
            </summary>
            <param name="boardId">The target</param>
            <param name="waitTimeInSec">Time in secs</param>
            <returns>Byte array</returns>
        </member>
        <member name="M:NTL_HIL.Dryer.SetSystemMode(System.Byte,NTL.EnumModeType,NTL.EnumSubModeType)">
            <summary>
            Sets the system mode.
            </summary>
            <param name="target">The target.</param>
            <param name="mode">The mode.</param>
            <param name="subMode">The sub mode.</param>
        </member>
        <member name="M:NTL_HIL.Dryer.StartLog(System.String)">
            <summary>
            
            </summary>
            <param name="path"></param>
        </member>
        <member name="M:NTL_HIL.Dryer.StopLog">
            <summary>
            
            </summary>
        </member>
        <member name="M:NTL_HIL.Dryer.SendRevealMessage(System.Byte,System.Byte[],System.Boolean,System.Double)">
            <summary>
            Sends raw reveal message on bus
            </summary>
            <param name="boardId">Board id</param>
            <param name="data">Packet to send on bus</param>
            <param name="blockingExecution">Optional parameter</param>
            <param name="timeout">Optional parameter</param>
            <returns>Returns bool</returns>
        </member>
        <member name="M:NTL_HIL.Dryer.ReadClientData(WhirlpoolCommunication.Packets.SimpleWhirlpoolPacket,System.Int32,WhirlpoolCommunication.Packets.SimpleWhirlpoolPacket)">
            <summary>
            
            </summary>
            <param name="desiredData"></param>
            <param name="waitTimeInSec"></param>
            <param name="maskData"></param>
            <returns></returns>
        </member>
        <member name="M:NTL_HIL.Dryer.ReadClientData(WhirlpoolCommunication.Packets.SimpleWhirlpoolPacket,WhirlpoolCommunication.Packets.SimpleWhirlpoolPacket)">
            <summary>
            
            </summary>
            <param name="desiredData"></param>
            <param name="maskData"></param>
            <returns></returns>
        </member>
        <member name="M:NTL_HIL.Dryer.ReadClientDataLatest(WhirlpoolCommunication.Packets.SimpleWhirlpoolPacket,System.Int32)">
            <summary>
            
            </summary>
            <param name="desiredData"></param>
            <param name="waitTimeInSec"></param>
            <returns></returns>
        </member>
        <member name="M:NTL_HIL.Dryer.ReadClientDataLatest(WhirlpoolCommunication.Packets.SimpleWhirlpoolPacket,WhirlpoolCommunication.Packets.SimpleWhirlpoolPacket,System.Int32)">
            <summary>
            
            </summary>
            <param name="desiredData"></param>
            <param name="maskData"></param>
            <param name="waitTimeInSec"></param>
            <returns></returns>
        </member>
        <member name="M:NTL_HIL.Dryer.SetLoad(System.Byte,NTL_HIL.Dryer.LOADID,NTL_HIL.NTL_HIL.SetState,System.Byte)">
            <summary>
            Low level interface : to control specific load provided as per parameters
            Opcode 0x01
            </summary>
            <param name="boardId">Board node id</param>
            <param name="loadName">Load name. For example : loadName = Laundry.LOADID.DLB1 for DLB1, Laundry.LOADID.Bake1 for Bake1</param>
            <param name="state">Load state. For example : state = Laundry.SETSTATE.ON, Laundry.SETSTATE.OFF</param>
            <param name="loadSize">Load size</param>
            <remarks></remarks>
        </member>
        <member name="M:NTL_HIL.Dryer.SetLoad(System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Low level interface : to control specific load provided as per parameters
            Opcode 0x01
            </summary>
            <param name="boardId">Board node id</param>
            <param name="loadId">Load id by index</param>
            <param name="loadSize">Load size</param>
            <param name="state">Load state</param>
        </member>
        <member name="M:NTL_HIL.Dryer.GetLoadData(System.Byte,System.Byte,System.Int32)">
            <summary>
            API Low level : get load data
            Opcode 0x02
            </summary>
            <param name="boardId">Board id</param>
            <param name="loadId">Load id by index</param>
            <param name="waitTimeInSec">Time in secs</param>
            <returns>Byte array</returns>
        </member>
        <member name="M:NTL_HIL.Dryer.GetLoadData(System.Byte,NTL_HIL.Dryer.LOADID)">
            <summary>
            API Low level : get load data
            Opcode 0x02
            </summary>
            <param name="boardId">Board id</param>
            <param name="loadName">Load name. For example : loadName = Laundry.LOADID.DLB1 for DLB1, Laundry.LOADID.Bake1 for Bake1</param>
            <returns>Byte array</returns>
        </member>
        <member name="M:NTL_HIL.Dryer.RequestLliData(System.Byte,System.Byte,System.Byte,System.Int32)">
            <summary>
            Gets the lli data
            Opocode 0x03
            </summary>
            <param name="boardId">The boardId</param>
            <param name="lliType">Type of the lli</param>
            <param name="lliPosition">The lli position</param>
            <param name="waitTimeInSec">Time in secs</param>
            <returns>Byte array</returns>
        </member>
        <member name="M:NTL_HIL.Dryer.RequestGIData(System.Byte,System.Byte,System.Int32)">
            <summary>
            Gets the gi data
            Opocode 0x04
            </summary>
            <param name="boardId">The boardId</param>
            <param name="giID">The gi identifier</param>
            <param name="waitTimeInSec">Time in secs</param>
            <returns>Byte array</returns>
        </member>
        <member name="M:NTL_HIL.Dryer.RequestAllLoadConfiguration(System.Byte,System.Int32)">
            <summary>
            Not validated
            Opocode 0x05
            </summary>
            <param name="boardId">Board Id</param>
            <param name="waitTimeInSec">Time in secs</param>
            <returns></returns>
        </member>
        <member name="M:NTL_HIL.Dryer.RequestAllLliConfiguration(System.Byte,System.Int32)">
            <summary>
            Not validated
            Opocode 0x06
            </summary>
            <param name="boardId">Board Id</param>
            <param name="waitTimeInSec">Time in secs</param>
            <returns></returns>
        </member>
        <member name="M:NTL_HIL.Dryer.RequestAllGiConfiguration(System.Byte,System.Int32)">
            <summary>
            Not validated
            Opocode 0x07
            </summary>
            <param name="boardId">Board Id</param>
            <param name="waitTimeInSec">Time in secs</param>
            <returns></returns>
        </member>
        <member name="M:NTL_HIL.Dryer.TurnAllLoadsOff(System.Byte)">
            <summary>
            Sets all load off
            Opocode 0x11
            </summary>
            <param name="boardId">Board id</param>
            <returns></returns>
        </member>
        <member name="M:NTL_HIL.Dryer.SetDebugLabel(System.Byte,System.Byte,System.String)">
            <summary>
            Sets the debuglabel
            Opocode 0x12
            </summary>
            <param name="boardId">The boardId</param>
            <param name="debugFunctionIndex">Index of the debug function</param>
            <param name="label">The label</param>
            <returns></returns> 
        </member>
        <member name="M:NTL_HIL.Dryer.EngageTestCycle(System.Byte,System.Byte)">
            <summary>
            Not validated
            Opocode 0x1B
            </summary>
            <param name="boardId"></param>
            <param name="testCycle"></param>
        </member>
        <member name="M:NTL_HIL.Dryer.HmiPlaySound(System.Byte,System.Byte,System.Byte)">
            <summary>
            Not validated
            Opocode 0x15
            </summary>
            <param name="boardId"></param>
            <param name="soundIndex"></param>
            <param name="volume"></param>
        </member>
        <member name="M:NTL_HIL.Dryer.HmiSetObject(System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Not validated
            Opocode 0x14
            </summary>
            <param name="boardId"></param>
            <param name="objectType"></param>
            <param name="objectIndex"></param>
            <param name="objectValue"></param>
        </member>
        <member name="M:NTL_HIL.Dryer.PhaseTestCycle(System.Byte,System.Byte)">
            <summary>
            Not validated
            Opocode 0x1C
            </summary>
            <param name="boardId"></param>
            <param name="testPhaseCycle"></param>
        </member>
        <member name="M:NTL_HIL.Dryer.SetDebugVariable(System.Byte,System.Byte,System.Byte[])">
            <summary>
            Not validated
            Opocode 0x13
            </summary>
            <param name="boardId"></param>
            <param name="debugFunctionIndex"></param>
            <param name="varaiableValue"></param>
        </member>
        <member name="M:NTL_HIL.Dryer.SetExtractGIs(System.Byte,System.Byte)">
            <summary>
            Not validated
            Opocode 0x1E
            </summary>
            <param name="boardId"></param>
            <param name="extractGIsState"></param>
        </member>
        <member name="M:NTL_HIL.Dryer.SetExtractLoads(System.Byte,System.Byte)">
            <summary>
            Not validated
            Opocode 0x1D
            </summary>
            <param name="boardId"></param>
            <param name="extractLoadState"></param>
        </member>
        <member name="M:NTL_HIL.Dryer.SetTestStorage(System.Byte,System.Byte)">
            <summary>
            Not validated
            Opocode 0x1A
            </summary>
            <param name="boardId"></param>
            <param name="storage"></param>
        </member>
        <member name="M:NTL_HIL.Dryer.ProductTypes(System.IO.Stream)">
            <summary>
            Read NKM XML file and get product type
            </summary>
            <param name="XMLStream">XML file</param>
            <returns>Product type refernce containing all data</returns>
        </member>
        <member name="M:NTL_HIL.Dryer.PilotType(System.IO.Stream)">
            <summary>
            Read NKM XML file and get pilot type
            </summary>
            <param name="XMLStream">XML file</param>
            <returns>Pilot type refernce containing all data</returns>
        </member>
        <member name="M:NTL_HIL.Dryer.LoadsList(System.IO.Stream)">
            <summary>
            Read NKM XML file and get load list
            </summary>
            <param name="XMLStream">XML file</param>
            <returns>Load list refernce containing all data</returns>
        </member>
        <member name="M:NTL_HIL.Dryer.LowLevelInputList(System.IO.Stream)">
            <summary>
            Read NKM XML file and get low level input info
            </summary>
            <param name="XMLStream">XML file</param>
            <returns>Low level input info refernce containing all data</returns>
        </member>
        <member name="M:NTL_HIL.Dryer.GenericInputList(System.IO.Stream)">
            <summary>
            Read NKM XML file and get generic input info
            </summary>
            <param name="XMLStream">XML file</param>
            <returns>Generic input info refernce containing all data</returns>
        </member>
        <member name="M:NTL_HIL.Dryer.RegulationsList(System.IO.Stream)">
            <summary>
            Read NKM XML file and regulations list
            </summary>
            <param name="XMLStream">XML file</param>
            <returns>Regulations list refernce containing all data</returns>
        </member>
        <member name="M:NTL_HIL.Dryer.CyclesList(System.IO.Stream)">
            <summary>
            Read NKM XML file and cycles list
            </summary>
            <param name="XMLStream">XML file</param>
            <returns>Cycles list refernce containing all data</returns>
        </member>
        <member name="M:NTL_HIL.Dryer.FaultsList(System.IO.Stream)">
            <summary>
            Read NKM XML file and fault list
            </summary>
            <param name="XMLStream">XML file</param>
            <returns>Fault list refernce containing all data</returns>
        </member>
        <member name="M:NTL_HIL.Dryer.RequestApplianceData(System.Byte)">
            <summary>
            Gets the appliancedata
            </summary>
            <param name="boardId">Board Id</param>
            <returns></returns>
        </member>
        <member name="M:NTL_HIL.Dryer.RequestBoardData(System.Byte,System.Byte)">
            <summary>
            Gets the board data
            </summary>
            <param name="boardId">Board Id</param>
            <param name="boardIndex">Board Index</param>
            <returns></returns>
        </member>
        <member name="M:NTL_HIL.Dryer.RequestProjectData(System.Byte,System.Byte,System.Byte)">
            <summary>
            Gets the project data
            </summary>
            <param name="boardId">Board Id</param>
            <param name="boardIndex">Index of the board</param>
            <param name="projectIndex">Index of the project</param>
            <returns></returns>
        </member>
        <member name="M:NTL_HIL.Dryer.RequestServiceData(System.Byte,System.Int32)">
            <summary>
            
            </summary>
            <param name="boardId"></param>
            <param name="waitTimeInSec"></param>
            <returns></returns>
        </member>
        <member name="M:NTL_HIL.Dryer.RequestEolData(System.Byte,System.Byte,System.Int32)">
            <summary>
            
            </summary>
            <param name="boardId"></param>
            <param name="eolIndex"></param>
            <param name="waitTimeInSec"></param>
            <returns></returns>
        </member>
        <member name="M:NTL_HIL.Dryer.RequestFVTData(System.Byte,System.Byte,System.Int32)">
            <summary>
            
            </summary>
            <param name="boardId"></param>
            <param name="fvtIndex"></param>
            <param name="waitTimeInSec"></param>
            <returns></returns>
        </member>
        <member name="M:NTL_HIL.Dryer.RequestClassBSignature(System.Byte,System.Int32)">
            <summary>
            
            </summary>
            <param name="boardId"></param>
            <param name="waitTimeInSec"></param>
            <returns></returns>
        </member>
        <member name="M:NTL_HIL.Dryer.RequestCalibrationData(System.Byte,System.Byte,System.Int32)">
            <summary>
            
            </summary>
            <param name="boardId"></param>
            <param name="calibrationDataId"></param>
            <param name="waitTimeInSec"></param>
            <returns></returns>
        </member>
        <member name="M:NTL_HIL.Dryer.SetBoardData(System.Byte,System.Byte,System.String,System.String,System.String,System.Byte,System.Byte)">
            <summary>
            Sets the board data
            </summary>
            <param name="boardId">Board Id</param>
            <param name="boardIndex">Board index</param>
            <param name="boardPartNumber">Board part number</param>
            <param name="boardRevision">Board revision</param>
            <param name="boardSerialNumber">Board serial number</param>
            <param name="boardReplacment">Board replacement</param>
            <param name="boardNumberOfProjects">Number of projects</param>
        </member>
        <member name="M:NTL_HIL.Dryer.SetEolData(System.Byte,System.Byte,System.Byte,System.String,System.String,System.String)">
            <summary>
            Sets the eol data
            </summary>
            <param name="boardId">Board Id</param>
            <param name="eolIndex">EOL index</param>
            <param name="eolId">EOL Id</param>
            <param name="eolTesterVersion">EOL test version</param>
            <param name="eolTestDate">EOL test date</param>
            <param name="eolTestResult">EOL test result</param>
        </member>
        <member name="M:NTL_HIL.Dryer.SetEolDataBytes(System.Byte,System.Byte,System.String,System.String)">
            <summary>
            Sets the eol data bytes
            </summary>
            <param name="boardId">Board Id</param>
            <param name="eolIndex">EOL index</param>
            <param name="eolTestResult">EOL test result</param>
            <param name="eolTestResultMask">EOL test result mask</param>
        </member>
        <member name="M:NTL_HIL.Dryer.SetFvtData(System.Byte,System.Byte,System.Byte,System.String,System.String,System.String)">
            <summary>
            Sets the FVT data
            </summary>
            <param name="boardId">Board Id</param>
            <param name="fvtIndex">FVT index</param>
            <param name="fvtId">FVT Id</param>
            <param name="fvtTesterVersion">FVT test version</param>
            <param name="fvtTestDate">FVT test date</param>
            <param name="fvtTestResult">FVT test result</param>
        </member>
        <member name="M:NTL_HIL.Dryer.SetFvtDataBytes(System.Byte,System.Byte,System.String,System.String)">
            <summary>
            Sets the FVT data bytes
            </summary>
            <param name="boardId">Board Id</param>
            <param name="fvtIndex">FVT index</param>
            <param name="fvtTestResult">FVT test result</param>
            <param name="fvtTestResultMask">FVT test result mask</param>
        </member>
        <member name="M:NTL_HIL.Dryer.SetServiceData(System.Byte,System.Byte,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Sets the serice data
            </summary>
            <param name="boardId">Board Id</param>
            <param name="serviceTesterId">Service tester Id</param>
            <param name="serviceTesterVersion">Service tester version</param>
            <param name="serviceTestDate">Service tester date</param>
            <param name="serviceTestAge">Service test age</param>
            <param name="serviceTestDuration">Service test duration</param>
            <param name="serviceTestResult">Service test result</param>
        </member>
        <member name="M:NTL_HIL.Dryer.StoreStaticData(System.Byte)">
            <summary>
            Stores the staticdata
            </summary>
            <param name="boardId">Board Id</param>
        </member>
        <member name="M:NTL_HIL.Dryer.SetApplianceData(System.Byte,System.String,System.String,System.Byte)">
            <summary>
            Sets the appliance data
            </summary>
            <param name="boardId">Board Id</param>
            <param name="modelNumber">Model number</param>
            <param name="serialNumber">Serial number</param>
            <param name="numberOfBoards">Number of boards</param>
        </member>
        <member name="T:NTL_HIL.Dryer.DryerSystemVariable">
            <summary>
            
            </summary>
        </member>
        <member name="T:NTL_HIL.Dryer.DataType">
            <summary>/// /// </summary>
        </member>
        <member name="F:NTL_HIL.Dryer.DataType.U8">
            <summary>/// /// </summary>
        </member>
        <member name="F:NTL_HIL.Dryer.DataType.U16">
            <summary>/// /// </summary>
        </member>
        <member name="F:NTL_HIL.Dryer.DataType.U32">
            <summary>/// /// </summary>
        </member>
        <member name="F:NTL_HIL.Dryer.DataType.U64">
            <summary>/// /// </summary>
        </member>
        <member name="F:NTL_HIL.Dryer.DataType.S8">
            <summary>/// /// </summary>
        </member>
        <member name="F:NTL_HIL.Dryer.DataType.S16">
            <summary>/// /// </summary>
        </member>
        <member name="F:NTL_HIL.Dryer.DataType.S32">
            <summary>/// /// </summary>
        </member>
        <member name="F:NTL_HIL.Dryer.DataType.S64">
            <summary>/// /// </summary>
        </member>
        <member name="M:NTL_HIL.Dryer.RequestSpecificVariable(System.Byte,System.Byte,System.Int32)">
            <summary>
            Get specific variable
            </summary>
            <param name="boardId">Board Id</param>
            <param name="index">Index</param>
            <param name="waitTimeInSec">Time in secs</param>
            <returns>Byte array</returns>
        </member>
        <member name="M:NTL_HIL.Dryer.RequestSpecificVariable(System.Byte,System.Byte,NTL_HIL.Dryer.DataType,System.Byte)">
            <summary>
            Request specific variable as per varibale id
            </summary>
            <param name="boardId">ACU node ID</param>
            <param name="variableId">Variable name from NKMParser.dll</param>
            <param name="offset">Position of the expected data</param>
            <param name="dataType">Data type</param>
            <returns>Returns array if offset is not provided or wrong offset provided\nReturns single value when offset sent withing limits</returns>
        </member>
        <member name="M:NTL_HIL.Dryer.NameOf``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            Kept for future usage
            </summary>
            <typeparam name="T"></typeparam>
            <param name="propertyExpression"></param>
            <returns></returns>
        </member>
        <member name="M:NTL_HIL.Dryer.GetData(System.Byte[],System.Byte,System.Byte)">
            <summary>
            
            </summary>
            <param name="payload"></param>
            <param name="offset"></param>
            <param name="numberOfBytes"></param>
            <returns></returns>
        </member>
        <member name="M:NTL_HIL.Dryer.RequestSpecificVariable(System.String)">
            <summary>
            
            </summary>
            <param name="variablename"></param>
            <returns></returns>
        </member>
        <member name="M:NTL_HIL.Dryer.ReadSelectedVariableXML(System.String)">
            <summary>
            
            </summary>
            <param name="path"></param>
        </member>
        <member name="M:NTL_HIL.Dryer.RegisterVariables">
            <summary>
            
            </summary>
        </member>
        <member name="M:NTL_HIL.Dryer.RegisterVariables(System.UInt32[])">
            <summary>
            
            </summary>
            <param name="exclusivelist"></param>
        </member>
        <member name="M:NTL_HIL.Dryer.PublishAcquisitionConfiguration(System.Byte,System.Int32)">
            <summary>
            Publish acquisition configuration
            </summary>
            <param name="boardId">Board Id</param>
            <param name="waitTimeInSec">Time in secs</param>
            <returns>Byte array</returns>
        </member>
        <member name="M:NTL_HIL.Dryer.PublishFixedVariableMedata(System.Byte,System.Byte,System.Int32)">
            <summary>
            Publish fixed variable metadata
            </summary>
            <param name="boardId">Board Id</param>
            <param name="waitTimeInSec">Time in secs</param>
            <param name="index">Index</param>
            <returns>Byte array</returns>
        </member>
        <member name="M:NTL_HIL.Dryer.PublishStreamData(System.Byte,System.Byte,System.Byte,System.Int32)">
            <summary>
            
            </summary>
            <param name="boardId"></param>
            <param name="lsb"></param>
            <param name="msb"></param>
            <param name="waitTimeInSec"></param>
            <returns></returns>
        </member>
        <member name="M:NTL_HIL.Dryer.PublishNumberOfVariables(System.Byte,System.Int32)">
            <summary>
            Publish number of variables
            </summary>
            <param name="boardId">Board Id</param>
            <param name="waitTimeInSec">Time in secs</param>
            <returns>Byte array</returns>
        </member>
        <member name="M:NTL_HIL.Dryer.ConfigureOnChangeBehavior(System.Byte,System.Byte,System.Byte)">
            <summary>
            Configure on change behavior
            </summary>
            <param name="boardId">Board Id</param>
            <param name="index">Index</param>
            <param name="onChangeBehavior">On change behavior</param>
        </member>
        <member name="M:NTL_HIL.Dryer.DefineMemoryMappedVariable(System.Byte,System.Byte[])">
            <summary>
            Define memory mapped variable
            </summary>
            <param name="boardId">Board Id</param>
            <param name="listofMemoryMapVariable">List of memory map variable</param>
        </member>
        <member name="M:NTL_HIL.Dryer.DeselectAllVariables(System.Byte)">
            <summary>
            Deselect all variables
            </summary>
            <param name="boardId">Board id</param>
        </member>
        <member name="M:NTL_HIL.Dryer.DeselectSpecificVariables(System.Byte,System.Byte[])">
            <summary>
            Deselect specific variabes
            </summary>
            <param name="boardId">Board id</param>
            <param name="listofVariables">List of vaiables</param>
        </member>
        <member name="M:NTL_HIL.Dryer.EnablePeriodicData(System.Byte,System.Byte)">
            <summary>
            Enable periodic data
            </summary>
            <param name="boardId">Board id</param>
            <param name="startStop">Start/Stop</param>
        </member>
        <member name="M:NTL_HIL.Dryer.RequestAcquisitionConfiguration(System.Byte)">
            <summary>
            Request acquisition configuration
            </summary>
            <param name="boardId">Board id</param>
        </member>
        <member name="M:NTL_HIL.Dryer.RequestFixedVariableMetadata(System.Byte,System.Byte)">
            <summary>
            Request fixed vairable metadata
            </summary>
            <param name="boardId">Board id</param>
            <param name="index">Index</param>
        </member>
        <member name="M:NTL_HIL.Dryer.RequestNumberOfVariables(System.Byte)">
            <summary>
            Request number of variable
            </summary>
            <param name="boardId">Board id</param>
        </member>
        <member name="M:NTL_HIL.Dryer.SelectAllVariables(System.Byte)">
            <summary>
            Select all variables
            </summary>
            <param name="boardId">Board id</param>
        </member>
        <member name="M:NTL_HIL.Dryer.SelectSpecificVariables(System.Byte,System.Byte[])">
            <summary>
            Select specific variables
            </summary>
            <param name="boardId">Board id</param>
            <param name="listofVariables">List of variables</param>
        </member>
        <member name="M:NTL_HIL.Dryer.SetPeriodicPublication(System.Byte,System.Byte,System.Byte)">
            <summary>
            Set periodic publication
            </summary>
            <param name="boardId">Board id</param>
            <param name="method">Method</param>
            <param name="millisecondPeriod">Time in millisecseonds</param>
        </member>
        <member name="M:NTL_HIL.Dryer.UndefineMemoryMappedVariable(System.Byte,System.Byte[])">
            <summary>
            Undefine memory mapped variable
            </summary>
            <param name="boardId">Board id</param>
            <param name="listofMemoryMapVariable">List of memory map variable</param>
        </member>
        <member name="M:NTL_HIL.Dryer.WriteFixedVariable(System.Byte,System.Byte[])">
            <summary>
            Write fixed varaibles
            </summary>
            <param name="boardId">Board id</param>
            <param name="listofMemoryMapVariable">List of memory map variable</param>
        </member>
        <member name="T:NTL_HIL.HAWasher">
            <summary>///     /// </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
        </member>
        <member name="P:NTL_HIL.HAWasher.SettingFileWritingCompletion">
            <summary>///     /// </summary>
        </member>
        <member name="P:NTL_HIL.HAWasher.SettingFileWritingStatus">
            <summary>///     /// </summary>
        </member>
        <member name="M:NTL_HIL.HAWasher.DownloadSettingFile(System.String,System.Byte,System.IO.FileStream)">
            <summary>///     /// </summary>
        </member>
        <member name="P:NTL_HIL.HAWasher.Target">
            <summary>
            
            </summary>
        </member>
        <member name="T:NTL_HIL.HAWasher.LOADID">
            <summary>
            
            </summary>
        </member>
        <member name="T:NTL_HIL.HAWasher.Regulation">
            <summary>
            
            </summary>
        </member>
        <member name="M:NTL_HIL.HAWasher.SetExternalControl">
            <summary>
            API 11 : Uses API 11 to set acu to external control to be controlled by PC
            </summary>
        </member>
        <member name="M:NTL_HIL.HAWasher.ModeHeartBeat">
            <summary>
            
            </summary>
        </member>
        <member name="M:NTL_HIL.HAWasher.ResumeNormalControl">
            <summary>
            
            </summary>
        </member>
        <member name="M:NTL_HIL.HAWasher.SetRegulation(System.Byte,System.Byte,System.Byte[])">
            <summary>
            Set regulation
            </summary>
            <param name="boardId">Board Id</param>
            <param name="regulationId">Regulation Id</param>
            <param name="param">Parameters required to set regulation</param>
        </member>
        <member name="M:NTL_HIL.HAWasher.SetRegulation(System.Byte,System.Byte[])">
            <summary>
            
            </summary>
            <param name="target"></param>
            <param name="param"></param>
        </member>
        <member name="M:NTL_HIL.HAWasher.Init(System.String,System.Byte)">
            <summary>
            Setting and initializing communication port
            </summary>
            <param name="comPort">Port name by which CCB2 device is connected</param>
            <param name="deviceAddress">Device address to set</param>
        </member>
        <member name="M:NTL_HIL.HAWasher.GetRegulationsData(System.Byte,System.Int32)">
            <summary>
            Gets the regulations data
            </summary>
            <param name="boardId">The target</param>
            <param name="waitTimeInSec">Time in secs</param>
            <returns>Byte array</returns>
        </member>
        <member name="M:NTL_HIL.HAWasher.GetNumberOfCycle(System.Byte,System.Int32)">
            <summary>
            Gets the number of cycle
            </summary>
            <param name="boardId">The target</param>
            <param name="waitTimeInSec">Time in secs</param>
            <returns>Byte</returns>
        </member>
        <member name="M:NTL_HIL.HAWasher.GetRegulationById(System.Byte,System.Byte,System.Int32)">
            <summary>
            Gets the regulation by identifier
            </summary>
            <param name="boardId">The target</param>
            <param name="functionId">The function identifier</param>
            <param name="waitTimeInSec">Time in secs</param>
            <returns>Byte</returns>
        </member>
        <member name="M:NTL_HIL.HAWasher.GetStatusData(System.Byte,System.Int32)">
            <summary>
            Gets the status data
            </summary>
            <param name="boardId">The target</param>
            <param name="waitTimeInSec">Time in secs</param>
            <returns>Byte array</returns>
        </member>
        <member name="M:NTL_HIL.HAWasher.GetSystemMode(System.Byte,System.Int32)">
            <summary>
            Get system mode
            </summary>
            <param name="boardId">Board Id</param>
            <param name="waitTimeInSec">Time in secs</param>
            <returns></returns>
        </member>
        <member name="M:NTL_HIL.HAWasher.GetStatusStructure(System.Byte,System.Int32)">
            <summary>
            Gets the status structure
            </summary>
            <param name="boardId">The target</param>
            <param name="waitTimeInSec">Time in secs</param>
            <returns>Byte array</returns>
        </member>
        <member name="M:NTL_HIL.HAWasher.SetSystemMode(System.Byte,NTL.EnumModeType,NTL.EnumSubModeType)">
            <summary>
            Sets the system mode.
            </summary>
            <param name="target">The target.</param>
            <param name="mode">The mode.</param>
            <param name="subMode">The sub mode.</param>
        </member>
        <member name="M:NTL_HIL.HAWasher.StartLog(System.String)">
            <summary>
            
            </summary>
            <param name="path"></param>
        </member>
        <member name="M:NTL_HIL.HAWasher.StopLog">
            <summary>
            
            </summary>
        </member>
        <member name="M:NTL_HIL.HAWasher.SendRevealMessage(System.Byte,System.Byte[],System.Boolean,System.Double)">
            <summary>
            Sends raw reveal message on bus
            </summary>
            <param name="boardId">Board id</param>
            <param name="data">Packet to send on bus</param>
            <param name="blockingExecution">Optional parameter</param>
            <param name="timeout">Optional parameter</param>
            <returns>Returns bool</returns>
        </member>
        <member name="M:NTL_HIL.HAWasher.ReadClientData(WhirlpoolCommunication.Packets.SimpleWhirlpoolPacket,System.Int32,WhirlpoolCommunication.Packets.SimpleWhirlpoolPacket)">
            <summary>
            
            </summary>
            <param name="desiredData"></param>
            <param name="waitTimeInSec"></param>
            <param name="maskData"></param>
            <returns></returns>
        </member>
        <member name="M:NTL_HIL.HAWasher.ReadClientData(WhirlpoolCommunication.Packets.SimpleWhirlpoolPacket,WhirlpoolCommunication.Packets.SimpleWhirlpoolPacket)">
            <summary>
            
            </summary>
            <param name="desiredData"></param>
            <param name="maskData"></param>
            <returns></returns>
        </member>
        <member name="M:NTL_HIL.HAWasher.ReadClientDataLatest(WhirlpoolCommunication.Packets.SimpleWhirlpoolPacket,System.Int32)">
            <summary>
            
            </summary>
            <param name="desiredData"></param>
            <param name="waitTimeInSec"></param>
            <returns></returns>
        </member>
        <member name="M:NTL_HIL.HAWasher.ReadClientDataLatest(WhirlpoolCommunication.Packets.SimpleWhirlpoolPacket,WhirlpoolCommunication.Packets.SimpleWhirlpoolPacket,System.Int32)">
            <summary>
            
            </summary>
            <param name="desiredData"></param>
            <param name="maskData"></param>
            <param name="waitTimeInSec"></param>
            <returns></returns>
        </member>
        <member name="M:NTL_HIL.HAWasher.SetLoad(System.Byte,System.Byte,NTL_HIL.NTL_HIL.SetState,System.Byte)">
            <summary>
            Low level interface : to control specific load provided as per parameters
            Opcode 0x01
            </summary>
            <param name="boardId">Board node id</param>
            <param name="loadName">Load name. For example : loadName = Laundry.LOADID.DLB1 for DLB1, Laundry.LOADID.Bake1 for Bake1</param>
            <param name="state">Load state. For example : state = Laundry.SETSTATE.ON, Laundry.SETSTATE.OFF</param>
            <param name="loadSize">Load size</param>
            <remarks></remarks>
        </member>
        <member name="M:NTL_HIL.HAWasher.SetLoad(System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Low level interface : to control specific load provided as per parameters
            Opcode 0x01
            </summary>
            <param name="boardId">Board node id</param>
            <param name="loadId">Load id by index</param>
            <param name="loadSize">Load size</param>
            <param name="state">Load state</param>
        </member>
        <member name="M:NTL_HIL.HAWasher.GetLoadData(System.Byte,System.Byte,System.Int32)">
            <summary>
            API Low level : get load data
            Opcode 0x02
            </summary>
            <param name="boardId">Board id</param>
            <param name="loadId">Load id by index</param>
            <param name="waitTimeInSec">Time in secs</param>
            <returns>Byte array</returns>
        </member>
        <member name="M:NTL_HIL.HAWasher.GetLoadData(System.Byte,System.Byte)">
            <summary>
            API Low level : get load data
            Opcode 0x02
            </summary>
            <param name="boardId">Board id</param>
            <param name="loadName">Load name. For example : loadName = Laundry.LOADID.DLB1 for DLB1, Laundry.LOADID.Bake1 for Bake1</param>
            <returns>Byte array</returns>
        </member>
        <member name="M:NTL_HIL.HAWasher.RequestLliData(System.Byte,System.Byte,System.Byte,System.Int32)">
            <summary>
            Gets the lli data
            Opocode 0x03
            </summary>
            <param name="boardId">The boardId</param>
            <param name="lliType">Type of the lli</param>
            <param name="lliPosition">The lli position</param>
            <param name="waitTimeInSec">Time in secs</param>
            <returns>Byte array</returns>
        </member>
        <member name="M:NTL_HIL.HAWasher.RequestGIData(System.Byte,System.Byte,System.Int32)">
            <summary>
            Gets the gi data
            Opocode 0x04
            </summary>
            <param name="boardId">The boardId</param>
            <param name="giID">The gi identifier</param>
            <param name="waitTimeInSec">Time in secs</param>
            <returns>Byte array</returns>
        </member>
        <member name="M:NTL_HIL.HAWasher.RequestAllLoadConfiguration(System.Byte,System.Int32)">
            <summary>
            Not validated
            Opocode 0x05
            </summary>
            <param name="boardId">Board Id</param>
            <param name="waitTimeInSec">Time in secs</param>
            <returns></returns>
        </member>
        <member name="M:NTL_HIL.HAWasher.RequestAllLliConfiguration(System.Byte,System.Int32)">
            <summary>
            Not validated
            Opocode 0x06
            </summary>
            <param name="boardId">Board Id</param>
            <param name="waitTimeInSec">Time in secs</param>
            <returns></returns>
        </member>
        <member name="M:NTL_HIL.HAWasher.RequestAllGiConfiguration(System.Byte,System.Int32)">
            <summary>
            Not validated
            Opocode 0x07
            </summary>
            <param name="boardId">Board Id</param>
            <param name="waitTimeInSec">Time in secs</param>
            <returns></returns>
        </member>
        <member name="M:NTL_HIL.HAWasher.TurnAllLoadsOff(System.Byte)">
            <summary>
            Sets all load off
            Opocode 0x11
            </summary>
            <param name="boardId">Board id</param>
            <returns></returns>
        </member>
        <member name="M:NTL_HIL.HAWasher.SetDebugLabel(System.Byte,System.Byte,System.String)">
            <summary>
            Sets the debuglabel
            Opocode 0x12
            </summary>
            <param name="boardId">The boardId</param>
            <param name="debugFunctionIndex">Index of the debug function</param>
            <param name="label">The label</param>
            <returns></returns> 
        </member>
        <member name="M:NTL_HIL.HAWasher.EngageTestCycle(System.Byte,System.Byte)">
            <summary>
            Not validated
            Opocode 0x1B
            </summary>
            <param name="boardId"></param>
            <param name="testCycle"></param>
        </member>
        <member name="M:NTL_HIL.HAWasher.HmiPlaySound(System.Byte,System.Byte,System.Byte)">
            <summary>
            Not validated
            Opocode 0x15
            </summary>
            <param name="boardId"></param>
            <param name="soundIndex"></param>
            <param name="volume"></param>
        </member>
        <member name="M:NTL_HIL.HAWasher.HmiSetObject(System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Not validated
            Opocode 0x14
            </summary>
            <param name="boardId"></param>
            <param name="objectType"></param>
            <param name="objectIndex"></param>
            <param name="objectValue"></param>
        </member>
        <member name="M:NTL_HIL.HAWasher.PhaseTestCycle(System.Byte,System.Byte)">
            <summary>
            Not validated
            Opocode 0x1C
            </summary>
            <param name="boardId"></param>
            <param name="testPhaseCycle"></param>
        </member>
        <member name="M:NTL_HIL.HAWasher.SetDebugVariable(System.Byte,System.Byte,System.Byte[])">
            <summary>
            Not validated
            Opocode 0x13
            </summary>
            <param name="boardId"></param>
            <param name="debugFunctionIndex"></param>
            <param name="varaiableValue"></param>
        </member>
        <member name="M:NTL_HIL.HAWasher.SetExtractGIs(System.Byte,System.Byte)">
            <summary>
            Not validated
            Opocode 0x1E
            </summary>
            <param name="boardId"></param>
            <param name="extractGIsState"></param>
        </member>
        <member name="M:NTL_HIL.HAWasher.SetExtractLoads(System.Byte,System.Byte)">
            <summary>
            Not validated
            Opocode 0x1D
            </summary>
            <param name="boardId"></param>
            <param name="extractLoadState"></param>
        </member>
        <member name="M:NTL_HIL.HAWasher.SetTestStorage(System.Byte,System.Byte)">
            <summary>
            Not validated
            Opocode 0x1A
            </summary>
            <param name="boardId"></param>
            <param name="storage"></param>
        </member>
        <member name="M:NTL_HIL.HAWasher.ProductTypes(System.IO.Stream)">
            <summary>
            Read NKM XML file and get product type
            </summary>
            <param name="XMLStream">XML file</param>
            <returns>Product type refernce containing all data</returns>
        </member>
        <member name="M:NTL_HIL.HAWasher.PilotType(System.IO.Stream)">
            <summary>
            Read NKM XML file and get pilot type
            </summary>
            <param name="XMLStream">XML file</param>
            <returns>Pilot type refernce containing all data</returns>
        </member>
        <member name="M:NTL_HIL.HAWasher.LoadsList(System.IO.Stream)">
            <summary>
            Read NKM XML file and get load list
            </summary>
            <param name="XMLStream">XML file</param>
            <returns>Load list refernce containing all data</returns>
        </member>
        <member name="M:NTL_HIL.HAWasher.LowLevelInputList(System.IO.Stream)">
            <summary>
            Read NKM XML file and get low level input info
            </summary>
            <param name="XMLStream">XML file</param>
            <returns>Low level input info refernce containing all data</returns>
        </member>
        <member name="M:NTL_HIL.HAWasher.GenericInputList(System.IO.Stream)">
            <summary>
            Read NKM XML file and get generic input info
            </summary>
            <param name="XMLStream">XML file</param>
            <returns>Generic input info refernce containing all data</returns>
        </member>
        <member name="M:NTL_HIL.HAWasher.RegulationsList(System.IO.Stream)">
            <summary>
            Read NKM XML file and regulations list
            </summary>
            <param name="XMLStream">XML file</param>
            <returns>Regulations list refernce containing all data</returns>
        </member>
        <member name="M:NTL_HIL.HAWasher.CyclesList(System.IO.Stream)">
            <summary>
            Read NKM XML file and cycles list
            </summary>
            <param name="XMLStream">XML file</param>
            <returns>Cycles list refernce containing all data</returns>
        </member>
        <member name="M:NTL_HIL.HAWasher.FaultsList(System.IO.Stream)">
            <summary>
            Read NKM XML file and fault list
            </summary>
            <param name="XMLStream">XML file</param>
            <returns>Fault list refernce containing all data</returns>
        </member>
        <member name="M:NTL_HIL.HAWasher.RequestApplianceData(System.Byte)">
            <summary>
            Gets the appliancedata
            </summary>
            <param name="boardId">Board Id</param>
            <returns></returns>
        </member>
        <member name="M:NTL_HIL.HAWasher.RequestBoardData(System.Byte,System.Byte)">
            <summary>
            Gets the board data
            </summary>
            <param name="boardId">Board Id</param>
            <param name="boardIndex">Board Index</param>
            <returns></returns>
        </member>
        <member name="M:NTL_HIL.HAWasher.RequestProjectData(System.Byte,System.Byte,System.Byte)">
            <summary>
            Gets the project data
            </summary>
            <param name="boardId">Board Id</param>
            <param name="boardIndex">Index of the board</param>
            <param name="projectIndex">Index of the project</param>
            <returns></returns>
        </member>
        <member name="M:NTL_HIL.HAWasher.RequestServiceData(System.Byte,System.Int32)">
            <summary>
            
            </summary>
            <param name="boardId"></param>
            <param name="waitTimeInSec"></param>
            <returns></returns>
        </member>
        <member name="M:NTL_HIL.HAWasher.RequestEolData(System.Byte,System.Byte,System.Int32)">
            <summary>
            
            </summary>
            <param name="boardId"></param>
            <param name="eolIndex"></param>
            <param name="waitTimeInSec"></param>
            <returns></returns>
        </member>
        <member name="M:NTL_HIL.HAWasher.RequestFVTData(System.Byte,System.Byte,System.Int32)">
            <summary>
            
            </summary>
            <param name="boardId"></param>
            <param name="fvtIndex"></param>
            <param name="waitTimeInSec"></param>
            <returns></returns>
        </member>
        <member name="M:NTL_HIL.HAWasher.RequestClassBSignature(System.Byte,System.Int32)">
            <summary>
            
            </summary>
            <param name="boardId"></param>
            <param name="waitTimeInSec"></param>
            <returns></returns>
        </member>
        <member name="M:NTL_HIL.HAWasher.RequestCalibrationData(System.Byte,System.Byte,System.Int32)">
            <summary>
            
            </summary>
            <param name="boardId"></param>
            <param name="calibrationDataId"></param>
            <param name="waitTimeInSec"></param>
            <returns></returns>
        </member>
        <member name="M:NTL_HIL.HAWasher.SetBoardData(System.Byte,System.Byte,System.String,System.String,System.String,System.Byte,System.Byte)">
            <summary>
            Sets the board data
            </summary>
            <param name="boardId">Board Id</param>
            <param name="boardIndex">Board index</param>
            <param name="boardPartNumber">Board part number</param>
            <param name="boardRevision">Board revision</param>
            <param name="boardSerialNumber">Board serial number</param>
            <param name="boardReplacment">Board replacement</param>
            <param name="boardNumberOfProjects">Number of projects</param>
        </member>
        <member name="M:NTL_HIL.HAWasher.SetEolData(System.Byte,System.Byte,System.Byte,System.String,System.String,System.String)">
            <summary>
            Sets the eol data
            </summary>
            <param name="boardId">Board Id</param>
            <param name="eolIndex">EOL index</param>
            <param name="eolId">EOL Id</param>
            <param name="eolTesterVersion">EOL test version</param>
            <param name="eolTestDate">EOL test date</param>
            <param name="eolTestResult">EOL test result</param>
        </member>
        <member name="M:NTL_HIL.HAWasher.SetEolDataBytes(System.Byte,System.Byte,System.String,System.String)">
            <summary>
            Sets the eol data bytes
            </summary>
            <param name="boardId">Board Id</param>
            <param name="eolIndex">EOL index</param>
            <param name="eolTestResult">EOL test result</param>
            <param name="eolTestResultMask">EOL test result mask</param>
        </member>
        <member name="M:NTL_HIL.HAWasher.SetFvtData(System.Byte,System.Byte,System.Byte,System.String,System.String,System.String)">
            <summary>
            Sets the FVT data
            </summary>
            <param name="boardId">Board Id</param>
            <param name="fvtIndex">FVT index</param>
            <param name="fvtId">FVT Id</param>
            <param name="fvtTesterVersion">FVT test version</param>
            <param name="fvtTestDate">FVT test date</param>
            <param name="fvtTestResult">FVT test result</param>
        </member>
        <member name="M:NTL_HIL.HAWasher.SetFvtDataBytes(System.Byte,System.Byte,System.String,System.String)">
            <summary>
            Sets the FVT data bytes
            </summary>
            <param name="boardId">Board Id</param>
            <param name="fvtIndex">FVT index</param>
            <param name="fvtTestResult">FVT test result</param>
            <param name="fvtTestResultMask">FVT test result mask</param>
        </member>
        <member name="M:NTL_HIL.HAWasher.SetServiceData(System.Byte,System.Byte,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Sets the serice data
            </summary>
            <param name="boardId">Board Id</param>
            <param name="serviceTesterId">Service tester Id</param>
            <param name="serviceTesterVersion">Service tester version</param>
            <param name="serviceTestDate">Service tester date</param>
            <param name="serviceTestAge">Service test age</param>
            <param name="serviceTestDuration">Service test duration</param>
            <param name="serviceTestResult">Service test result</param>
        </member>
        <member name="M:NTL_HIL.HAWasher.StoreStaticData(System.Byte)">
            <summary>
            Stores the staticdata
            </summary>
            <param name="boardId">Board Id</param>
        </member>
        <member name="M:NTL_HIL.HAWasher.SetApplianceData(System.Byte,System.String,System.String,System.Byte)">
            <summary>
            Sets the appliance data
            </summary>
            <param name="boardId">Board Id</param>
            <param name="modelNumber">Model number</param>
            <param name="serialNumber">Serial number</param>
            <param name="numberOfBoards">Number of boards</param>
        </member>
        <member name="T:NTL_HIL.HAWasher.HAWasherSystemVariable">
            <summary>
            
            </summary>
        </member>
        <member name="T:NTL_HIL.HAWasher.DataType">
            <summary>/// /// </summary>
        </member>
        <member name="F:NTL_HIL.HAWasher.DataType.U8">
            <summary>/// /// </summary>
        </member>
        <member name="F:NTL_HIL.HAWasher.DataType.U16">
            <summary>/// /// </summary>
        </member>
        <member name="F:NTL_HIL.HAWasher.DataType.U32">
            <summary>/// /// </summary>
        </member>
        <member name="F:NTL_HIL.HAWasher.DataType.U64">
            <summary>/// /// </summary>
        </member>
        <member name="F:NTL_HIL.HAWasher.DataType.S8">
            <summary>/// /// </summary>
        </member>
        <member name="F:NTL_HIL.HAWasher.DataType.S16">
            <summary>/// /// </summary>
        </member>
        <member name="F:NTL_HIL.HAWasher.DataType.S32">
            <summary>/// /// </summary>
        </member>
        <member name="F:NTL_HIL.HAWasher.DataType.S64">
            <summary>/// /// </summary>
        </member>
        <member name="M:NTL_HIL.HAWasher.RequestSpecificVariable(System.Byte,System.Byte,System.Int32)">
            <summary>
            Get specific variable
            </summary>
            <param name="boardId">Board Id</param>
            <param name="index">Index</param>
            <param name="waitTimeInSec">Time in secs</param>
            <returns>Byte array</returns>
        </member>
        <member name="M:NTL_HIL.HAWasher.RequestSpecificVariable(System.Byte,System.Byte,NTL_HIL.HAWasher.DataType,System.Byte)">
            <summary>
            Request specific variable as per varibale id
            </summary>
            <param name="boardId">ACU node ID</param>
            <param name="variableId">Variable name from NKMParser.dll</param>
            <param name="offset">Position of the expected data</param>
            <param name="dataType">Data type</param>
            <returns>Returns array if offset is not provided or wrong offset provided\nReturns single value when offset sent withing limits</returns>
        </member>
        <member name="M:NTL_HIL.HAWasher.GetData(System.Byte[],System.Byte,System.Byte)">
            <summary>
            
            </summary>
            <param name="payload"></param>
            <param name="offset"></param>
            <param name="numberOfBytes"></param>
            <returns></returns>
        </member>
        <member name="M:NTL_HIL.HAWasher.RequestSpecificVariable(System.String)">
            <summary>
            
            </summary>
            <param name="variablename"></param>
            <returns></returns>
        </member>
        <member name="M:NTL_HIL.HAWasher.ReadSelectedVariableXML(System.String)">
            <summary>
            
            </summary>
            <param name="path"></param>
        </member>
        <member name="M:NTL_HIL.HAWasher.RegisterVariables">
            <summary>
            
            </summary>
        </member>
        <member name="M:NTL_HIL.HAWasher.RegisterVariables(System.UInt32[])">
            <summary>
            
            </summary>
            <param name="exclusivelist"></param>
        </member>
        <member name="M:NTL_HIL.HAWasher.PublishAcquisitionConfiguration(System.Byte,System.Int32)">
            <summary>
            Publish acquisition configuration
            </summary>
            <param name="boardId">Board Id</param>
            <param name="waitTimeInSec">Time in secs</param>
            <returns>Byte array</returns>
        </member>
        <member name="M:NTL_HIL.HAWasher.PublishFixedVariableMedata(System.Byte,System.Byte,System.Int32)">
            <summary>
            Publish fixed variable metadata
            </summary>
            <param name="boardId">Board Id</param>
            <param name="waitTimeInSec">Time in secs</param>
            <param name="index">Index</param>
            <returns>Byte array</returns>
        </member>
        <member name="M:NTL_HIL.HAWasher.PublishStreamData(System.Byte,System.Byte,System.Byte,System.Int32)">
            <summary>
            
            </summary>
            <param name="boardId"></param>
            <param name="lsb"></param>
            <param name="msb"></param>
            <param name="waitTimeInSec"></param>
            <returns></returns>
        </member>
        <member name="M:NTL_HIL.HAWasher.PublishNumberOfVariables(System.Byte,System.Int32)">
            <summary>
            Publish number of variables
            </summary>
            <param name="boardId">Board Id</param>
            <param name="waitTimeInSec">Time in secs</param>
            <returns>Byte array</returns>
        </member>
        <member name="M:NTL_HIL.HAWasher.ConfigureOnChangeBehavior(System.Byte,System.Byte,System.Byte)">
            <summary>
            Configure on change behavior
            </summary>
            <param name="boardId">Board Id</param>
            <param name="index">Index</param>
            <param name="onChangeBehavior">On change behavior</param>
        </member>
        <member name="M:NTL_HIL.HAWasher.DefineMemoryMappedVariable(System.Byte,System.Byte[])">
            <summary>
            Define memory mapped variable
            </summary>
            <param name="boardId">Board Id</param>
            <param name="listofMemoryMapVariable">List of memory map variable</param>
        </member>
        <member name="M:NTL_HIL.HAWasher.DeselectAllVariables(System.Byte)">
            <summary>
            Deselect all variables
            </summary>
            <param name="boardId">Board id</param>
        </member>
        <member name="M:NTL_HIL.HAWasher.DeselectSpecificVariables(System.Byte,System.Byte[])">
            <summary>
            Deselect specific variabes
            </summary>
            <param name="boardId">Board id</param>
            <param name="listofVariables">List of vaiables</param>
        </member>
        <member name="M:NTL_HIL.HAWasher.EnablePeriodicData(System.Byte,System.Byte)">
            <summary>
            Enable periodic data
            </summary>
            <param name="boardId">Board id</param>
            <param name="startStop">Start/Stop</param>
        </member>
        <member name="M:NTL_HIL.HAWasher.RequestAcquisitionConfiguration(System.Byte)">
            <summary>
            Request acquisition configuration
            </summary>
            <param name="boardId">Board id</param>
        </member>
        <member name="M:NTL_HIL.HAWasher.RequestFixedVariableMetadata(System.Byte,System.Byte)">
            <summary>
            Request fixed vairable metadata
            </summary>
            <param name="boardId">Board id</param>
            <param name="index">Index</param>
        </member>
        <member name="M:NTL_HIL.HAWasher.RequestNumberOfVariables(System.Byte)">
            <summary>
            Request number of variable
            </summary>
            <param name="boardId">Board id</param>
        </member>
        <member name="M:NTL_HIL.HAWasher.SelectAllVariables(System.Byte)">
            <summary>
            Select all variables
            </summary>
            <param name="boardId">Board id</param>
        </member>
        <member name="M:NTL_HIL.HAWasher.SelectSpecificVariables(System.Byte,System.Byte[])">
            <summary>
            Select specific variables
            </summary>
            <param name="boardId">Board id</param>
            <param name="listofVariables">List of variables</param>
        </member>
        <member name="M:NTL_HIL.HAWasher.SetPeriodicPublication(System.Byte,System.Byte,System.Byte)">
            <summary>
            Set periodic publication
            </summary>
            <param name="boardId">Board id</param>
            <param name="method">Method</param>
            <param name="millisecondPeriod">Time in millisecseonds</param>
        </member>
        <member name="M:NTL_HIL.HAWasher.UndefineMemoryMappedVariable(System.Byte,System.Byte[])">
            <summary>
            Undefine memory mapped variable
            </summary>
            <param name="boardId">Board id</param>
            <param name="listofMemoryMapVariable">List of memory map variable</param>
        </member>
        <member name="M:NTL_HIL.HAWasher.WriteFixedVariable(System.Byte,System.Byte[])">
            <summary>
            Write fixed varaibles
            </summary>
            <param name="boardId">Board id</param>
            <param name="listofMemoryMapVariable">List of memory map variable</param>
        </member>
        <member name="T:NTL_HIL.NTL_HIL">
            <summary>
            Base class used as template to be inherited in the subsequent classes
            </summary>
            <summary>
            Base class used as template to be inherited in the subsequent classes
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
        </member>
        <member name="P:NTL_HIL.NTL_HIL.SettingFileWritingCompletion">
            <summary>///     /// </summary>
        </member>
        <member name="P:NTL_HIL.NTL_HIL.SettingFileWritingStatus">
            <summary>///     /// </summary>
        </member>
        <member name="M:NTL_HIL.NTL_HIL.DownloadSettingFile(System.String,System.Byte,System.IO.FileStream)">
            <summary>///     /// </summary>
        </member>
        <member name="M:NTL_HIL.NTL_HIL.SettingFileDownload(System.IO.FileStream)">
            <summary>
            
            </summary>
            <param name="file"></param>
            <returns></returns>
        </member>
        <member name="F:NTL_HIL.NTL_HIL.wideLocal">
            <summary>
            Local instance of <c>WideBox</c> class for setting the 
            </summary>
        </member>
        <member name="F:NTL_HIL.NTL_HIL.ntlLocal">
            <summary>
            
            </summary>
        </member>
        <member name="F:NTL_HIL.NTL_HIL.wdlib">
            <summary>
            
            </summary>
        </member>
        <member name="F:NTL_HIL.NTL_HIL.CurrentRegulationByteArray">
            <summary>
            
            </summary>
        </member>
        <member name="T:NTL_HIL.NTL_HIL.SetState">
            <summary>
            <c>SetState</c> to set the load state <c>ON</c> or <c>OFF</c>
            </summary>
        </member>
        <member name="F:NTL_HIL.NTL_HIL.SetState.OFF">
            <summary>
            
            </summary>
        </member>
        <member name="F:NTL_HIL.NTL_HIL.SetState.ON">
            <summary>
            
            </summary>
        </member>
        <member name="M:NTL_HIL.NTL_HIL.Init(System.String,System.Byte)">
            <summary>
            Setting and initializing communication port
            </summary>
            <param name="comPort">Port name by which CCB2 device is connected</param>
            <param name="deviceAddress">Device address to set</param>
        </member>
        <member name="M:NTL_HIL.NTL_HIL.SetRegulation(System.Byte,System.Byte,System.Byte[])">
            <summary>
            
            </summary>
            <param name="target"></param>
            <param name="regulationId"></param>
            <param name="param"></param>
        </member>
        <member name="M:NTL_HIL.NTL_HIL.SetRegulation(System.Byte,System.Byte[])">
            <summary>
            
            </summary>
            <param name="target"></param>
            <param name="regulationId"></param>
            <param name="param"></param>
        </member>
        <member name="M:NTL_HIL.NTL_HIL.GetRegulationsData(System.Byte,System.Int32)">
            <summary>
            Gets the regulations data
            </summary>
            <param name="target">The target</param>
            <param name="waitTimeInSec">Time in secs</param>
            <returns>Byte array</returns>
        </member>
        <member name="M:NTL_HIL.NTL_HIL.WaitforDuration(System.UInt32)">
            <summary>
            
            </summary>
            <param name="miliseconds"></param>
        </member>
        <member name="M:NTL_HIL.NTL_HIL.GetRegulationById(System.Byte,System.Byte,System.Int32)">
            <summary>
            Gets the regulation by identifier
            </summary>
            <param name="target">The target</param>
            <param name="functionId">The function identifier</param>
            <param name="waitTimeInSec">Time in secs</param>
            <returns>Byte</returns>
        </member>
        <member name="M:NTL_HIL.NTL_HIL.GetNumberOfCycle(System.Byte,System.Int32)">
            <summary>
            Gets the number of cycle
            </summary>
            <param name="target">The target</param>
            <param name="waitTimeInSec">Time in secs</param>
            <returns>Byte</returns>
        </member>
        <member name="M:NTL_HIL.NTL_HIL.GetStatusData(System.Byte,System.Int32)">
            <summary>
            Gets the status data
            </summary>
            <param name="target">The target</param>
            <param name="waitTimeInSec">Time in secs</param>
            <returns>Byte array</returns>
        </member>
        <member name="M:NTL_HIL.NTL_HIL.GetSystemMode(System.Byte,System.Int32)">
            <summary>
            Gets the system mode
            </summary>
            <param name="target">The target</param>
            <param name="waitTimeInSec">Time in secs</param>
            <returns>Byte array</returns>
        </member>
        <member name="M:NTL_HIL.NTL_HIL.GetStatusStructure(System.Byte,System.Int32)">
            <summary>
            Gets the status structure
            </summary>
            <param name="target">The target</param>
            <param name="waitTimeInSec">Time in secs</param>
            <returns>Byte array</returns>
        </member>
        <member name="M:NTL_HIL.NTL_HIL.SetSystemMode(System.Byte,NTL.EnumModeType,NTL.EnumSubModeType)">
            <summary>
            Sets the system mode.
            </summary>
            <param name="target">The target.</param>
            <param name="mode">The mode.</param>
            <param name="subMode">The sub mode.</param>
        </member>
        <member name="M:NTL_HIL.NTL_HIL.SetExtendedMode">
            <summary>
            Not Implemented
            </summary>
        </member>
        <member name="M:NTL_HIL.NTL_HIL.GetFunctionPosition">
            <summary>
            Not Implemented
            </summary>
        </member>
        <member name="M:NTL_HIL.NTL_HIL.PublishStatusStructure">
            <summary>
            Not Implemented
            </summary>
        </member>
        <member name="M:NTL_HIL.NTL_HIL.StartLog(System.String)">
            <summary>
            
            </summary>
            <param name="path"></param>
        </member>
        <member name="M:NTL_HIL.NTL_HIL.StopLog">
            <summary>
            
            </summary>
        </member>
        <member name="M:NTL_HIL.NTL_HIL.StopThread">
            <summary>
            
            </summary>
        </member>
        <member name="M:NTL_HIL.NTL_HIL.SendRevealMessage(System.Byte,System.Byte[],System.Boolean,System.Double)">
            <summary>
            
            </summary>
            <param name="target"></param>
            <param name="sap"></param>
            <param name="data"></param>
            <param name="blockingExecution"></param>
            <param name="timeout"></param>
            <returns></returns>
        </member>
        <member name="M:NTL_HIL.NTL_HIL.ReadClientDataLatest(WhirlpoolCommunication.Packets.SimpleWhirlpoolPacket,WhirlpoolCommunication.Packets.SimpleWhirlpoolPacket,System.Int32)">
            <summary>
            
            </summary>
            <param name="desiredData"></param>
            <param name="maskData"></param>
            <param name="waitTimeInSec"></param>
            <returns></returns>
        </member>
        <member name="M:NTL_HIL.NTL_HIL.ReadClientDataLatest(WhirlpoolCommunication.Packets.SimpleWhirlpoolPacket,System.Int32)">
            <summary>
            
            </summary>
            <param name="desiredData"></param>
            <param name="waitTimeInSec"></param>
            <returns></returns>
        </member>
        <member name="M:NTL_HIL.NTL_HIL.ReadClientData(WhirlpoolCommunication.Packets.SimpleWhirlpoolPacket,System.Int32,WhirlpoolCommunication.Packets.SimpleWhirlpoolPacket)">
            <summary>
            
            </summary>
            <param name="desiredData"></param>
            <param name="waitTimeInSec"></param>
            <param name="maskData"></param>
            <returns></returns>
        </member>
        <member name="M:NTL_HIL.NTL_HIL.ReadClientData(WhirlpoolCommunication.Packets.SimpleWhirlpoolPacket,WhirlpoolCommunication.Packets.SimpleWhirlpoolPacket)">
            <summary>
            
            </summary>
            <param name="desiredData"></param>
            <param name="maskData"></param>
            <returns></returns>
        </member>
        <member name="M:NTL_HIL.NTL_HIL.GetFunctionIDs(System.Byte,System.Int32)">
            <summary>
            Function to be used for getting regulation ID structure
            </summary>
            <param name="target">ACU board ID</param>
            <param name="waitTimeInSec">Wait duration for polling data</param>
            <returns>Byte frame of current regulation list with respective compartment</returns>
        </member>
        <member name="M:NTL_HIL.NTL_HIL.Update(System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Updates the regulation list to be sent\n
            After this SendRegulation must be used to update regulation 
            </summary>
            <param name="compartmentId">Compartment ID</param>
            <param name="regulationId">Regulation ID</param>
            <param name="data">Data value to be set</param>
            <param name="acuBoardId">ACU board ID</param>
            <returns></returns>
        </member>
        <member name="M:NTL_HIL.NTL_HIL.SendRegulation(System.Byte)">
            <summary>
            Sends updated regulation data(frame) on WIN bus\n
            Make sure to update regulation list using Update
            </summary>
            <param name="acuBoardId">ACU board ID(Default ID = 1)</param>
            <returns>Returns "true" when regulation list is not null and "false" when regulation list is null</returns>
        </member>
        <member name="M:NTL_HIL.NTL_HIL.GetCurrentRegulation(System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            
            </summary>
            <param name="compartmentid"></param>
            <param name="regulationid"></param>
            <param name="value"></param>
            <param name="acuBoardId"></param>
            <returns></returns>
        </member>
        <member name="M:NTL_HIL.NTL_HIL.PublishFaultCode(System.Byte,System.Byte,System.Int32)">
            <summary>
            
            </summary>
            <param name="target"></param>
            <param name="index"></param>
            <param name="waitTimeInSec"></param>
            <returns></returns>
        </member>
        <member name="M:NTL_HIL.NTL_HIL.SetLoad(System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            API Low level : Set Load
            </summary>
            <param name="target"></param>
            <param name="loadId"></param>
            <param name="loadSize"></param>
            <param name="loadData"></param>
        </member>
        <member name="M:NTL_HIL.NTL_HIL.GetLoadData(System.Byte,System.Byte,System.Int32)">
            <summary>
            API Low level : Get load data
            </summary>
            <param name="target"></param>
            <param name="loadId"></param>
            <param name="waitTimeInSec"></param>
            <returns></returns>
        </member>
        <member name="M:NTL_HIL.NTL_HIL.RequestLliData(System.Byte,System.Byte,System.Byte,System.Int32)">
            <summary>
            
            </summary>
            <param name="target"></param>
            <param name="lliType"></param>
            <param name="lliPosition"></param>
            <param name="waitTimeInSec"></param>
            <returns></returns>
        </member>
        <member name="M:NTL_HIL.NTL_HIL.RequestGIData(System.Byte,System.Byte,System.Int32)">
            <summary>
            
            </summary>
            <param name="target"></param>
            <param name="giID"></param>
            <param name="waitTimeInSec"></param>
            <returns></returns>
        </member>
        <member name="M:NTL_HIL.NTL_HIL.RequestAllLoadConfiguration(System.Byte,System.Int32)">
            <summary>
            
            </summary>
            <param name="target"></param>
            <param name="waitTimeInSec"></param>
            <returns></returns>
        </member>
        <member name="M:NTL_HIL.NTL_HIL.RequestAllLliConfiguration(System.Byte,System.Int32)">
            <summary>
            
            </summary>
            <param name="target"></param>
            <param name="waitTimeInSec"></param>
            <returns></returns>
        </member>
        <member name="M:NTL_HIL.NTL_HIL.RequestAllGiConfiguration(System.Byte,System.Int32)">
            <summary>
            
            </summary>
            <param name="target"></param>
            <param name="waitTimeInSec"></param>
            <returns></returns>
        </member>
        <member name="M:NTL_HIL.NTL_HIL.PublishEvent(System.Byte,System.Int32)">
            <summary>
            Not Implemented
            </summary>
        </member>
        <member name="M:NTL_HIL.NTL_HIL.CallDebugFunction(System.Byte,System.Int32)">
            <summary>
            Not Implemented
            </summary>
        </member>
        <member name="M:NTL_HIL.NTL_HIL.TurnAllLoadsOff(System.Byte)">
            <summary>
            
            </summary>
            <param name="target"></param>
        </member>
        <member name="M:NTL_HIL.NTL_HIL.SetDebugLabel(System.Byte,System.Byte,System.String)">
            <summary>
            
            </summary>
            <param name="target"></param>
            <param name="debugFunctionIndex"></param>
            <param name="label"></param>
        </member>
        <member name="M:NTL_HIL.NTL_HIL.SetDebugVariable(System.Byte,System.Byte,System.Byte[])">
            <summary>
            
            </summary>
            <param name="target"></param>
            <param name="debugFunctionIndex"></param>
            <param name="varaiableValue"></param>
        </member>
        <member name="M:NTL_HIL.NTL_HIL.HmiSetObject(System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            
            </summary>
            <param name="target"></param>
            <param name="objectType"></param>
            <param name="objectIndex"></param>
            <param name="objectValue"></param>
        </member>
        <member name="M:NTL_HIL.NTL_HIL.HmiPlaySound(System.Byte,System.Byte,System.Byte)">
            <summary>
            
            </summary>
            <param name="target"></param>
            <param name="soundIndex"></param>
            <param name="volume"></param>
        </member>
        <member name="M:NTL_HIL.NTL_HIL.SetTestStorage(System.Byte,System.Byte)">
            <summary>
            
            </summary>
            <param name="target"></param>
            <param name="storage"></param>
        </member>
        <member name="M:NTL_HIL.NTL_HIL.EngageTestCycle(System.Byte,System.Byte)">
            <summary>
            
            </summary>
            <param name="target"></param>
            <param name="testCycle"></param>
        </member>
        <member name="M:NTL_HIL.NTL_HIL.PhaseTestCycle(System.Byte,System.Byte)">
            <summary>
            
            </summary>
            <param name="target"></param>
            <param name="testPhaseCycle"></param>
        </member>
        <member name="M:NTL_HIL.NTL_HIL.SetExtractLoads(System.Byte,System.Byte)">
            <summary>
            
            </summary>
            <param name="target"></param>
            <param name="extractLoadState"></param>
        </member>
        <member name="M:NTL_HIL.NTL_HIL.SetExtractGIs(System.Byte,System.Byte)">
            <summary>
            
            </summary>
            <param name="target"></param>
            <param name="extractGIsState"></param>
        </member>
        <member name="M:NTL_HIL.NTL_HIL.ProductTypes(System.IO.Stream)">
            <summary>
            Read NKM XML file and get product type
            </summary>
            <param name="XMLStream">XML file</param>
            <returns>Product type refernce containing all data</returns>
        </member>
        <member name="M:NTL_HIL.NTL_HIL.PilotType(System.IO.Stream)">
            <summary>
            Read NKM XML file and get pilot type
            </summary>
            <param name="XMLStream">XML file</param>
            <returns>Pilot type refernce containing all data</returns>
        </member>
        <member name="M:NTL_HIL.NTL_HIL.LoadsList(System.IO.Stream)">
            <summary>
            Read NKM XML file and get load list
            </summary>
            <param name="XMLStream">XML file</param>
            <returns>Load list refernce containing all data</returns>
        </member>
        <member name="M:NTL_HIL.NTL_HIL.LowLevelInputList(System.IO.Stream)">
            <summary>
            Read NKM XML file and get low level input info
            </summary>
            <param name="XMLStream">XML file</param>
            <returns>Low level input info refernce containing all data</returns>
        </member>
        <member name="M:NTL_HIL.NTL_HIL.GenericInputList(System.IO.Stream)">
            <summary>
            Read NKM XML file and get generic input info
            </summary>
            <param name="XMLStream">XML file</param>
            <returns>Generic input info refernce containing all data</returns>
        </member>
        <member name="M:NTL_HIL.NTL_HIL.RegulationsList(System.IO.Stream)">
            <summary>
            Read NKM XML file and regulations list
            </summary>
            <param name="XMLStream">XML file</param>
            <returns>Regulations list refernce containing all data</returns>
        </member>
        <member name="M:NTL_HIL.NTL_HIL.CyclesList(System.IO.Stream)">
            <summary>
            Read NKM XML file and cycles list
            </summary>
            <param name="XMLStream">XML file</param>
            <returns>Cycles list refernce containing all data</returns>
        </member>
        <member name="M:NTL_HIL.NTL_HIL.FaultsList(System.IO.Stream)">
            <summary>
            Read NKM XML file and fault list
            </summary>
            <param name="XMLStream">XML file</param>
            <returns>Fault list refernce containing all data</returns>
        </member>
        <member name="M:NTL_HIL.NTL_HIL.RequestApplianceData(System.Byte)">
            <summary>
            Gets the appliancedata
            </summary>
            <param name="target">The target</param>
            <returns></returns>
        </member>
        <member name="M:NTL_HIL.NTL_HIL.SetApplianceData(System.Byte,System.String,System.String,System.Byte)">
            <summary>
            Sets the appliance data
            </summary>
            <param name="target">The target</param>
            <param name="modelNumber">The model number</param>
            <param name="serialNumber">The serial number</param>
            <param name="numberOfBoards">The number of boards</param>
            <returns></returns>
        </member>
        <member name="M:NTL_HIL.NTL_HIL.RequestBoardData(System.Byte,System.Byte)">
            <summary>
            Gets the board data
            </summary>
            <param name="target">The target</param>
            <param name="boardIndex">Index of the board</param>
            <returns></returns>
        </member>
        <member name="M:NTL_HIL.NTL_HIL.SetBoardData(System.Byte,System.Byte,System.String,System.String,System.String,System.Byte,System.Byte)">
            <summary>
            Sets the board data
            </summary>
            <param name="target">The target</param>
            <param name="boardIndex">Index of the board</param>
            <param name="boardPartNumber">The board part number</param>
            <param name="boardRevision">The board revision</param>
            <param name="boardSerialNumber">The board serial number</param>
            <param name="boardReplacment">The board replacment</param>
            <param name="boardNumberOfProjects">The board number of projects</param>
            <returns></returns>
        </member>
        <member name="M:NTL_HIL.NTL_HIL.RequestProjectData(System.Byte,System.Byte,System.Byte)">
            <summary>
            Gets the project data
            </summary>
            <param name="target">The target</param>
            <param name="boardIndex">Index of the board</param>
            <param name="projectIndex">Index of the project</param>
            <returns></returns>
        </member>
        <member name="M:NTL_HIL.NTL_HIL.RequestServiceData(System.Byte,System.Int32)">
            <summary>
            
            </summary>
            <param name="target"></param>
            <param name="waitTimeInSec"></param>
            <returns></returns>
        </member>
        <member name="M:NTL_HIL.NTL_HIL.SetServiceData(System.Byte,System.Byte,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Sets the serice data
            </summary>
            <param name="target">The target</param>
            <param name="serviceTesterId">The service tester identifier</param>
            <param name="serviceTesterVersion">The service tester version</param>
            <param name="serviceTestDate">The service test date</param>
            <param name="serviceTestAge">The service test age</param>
            <param name="serviceTestDuration">Duration of the service test</param>
            <param name="serviceTestResult">The service test result</param>
            <returns></returns>
        </member>
        <member name="M:NTL_HIL.NTL_HIL.RequestFVTData(System.Byte,System.Byte,System.Int32)">
            <summary>
            
            </summary>
            <param name="target"></param>
            <param name="fvtIndex"></param>
            <param name="waitTimeInSec"></param>
            <returns></returns>
        </member>
        <member name="M:NTL_HIL.NTL_HIL.SetFvtData(System.Byte,System.Byte,System.Byte,System.String,System.String,System.String)">
            <summary>
            Sets the FVT data
            </summary>
            <param name="target">The target</param>
            <param name="fvtIndex">Index of the FVT</param>
            <param name="fvtId">The FVT identifier</param>
            <param name="fvtTesterVersion">The FVT tester version</param>
            <param name="fvtTestDate">The FVT test date</param>
            <param name="fvtTestResult">The FVT test result</param>
            <returns></returns>
        </member>
        <member name="M:NTL_HIL.NTL_HIL.SetFvtDataBytes(System.Byte,System.Byte,System.String,System.String)">
            <summary>
            Sets the FVT data bytes
            </summary>
            <param name="target">The target</param>
            <param name="fvtIndex">Index of the FVT</param>
            <param name="fvtTestResult">The FVT test result</param>
            <param name="fvtTestResultMask">The FVT test result mask</param>
            <returns></returns>
        </member>
        <member name="M:NTL_HIL.NTL_HIL.RequestEolData(System.Byte,System.Byte,System.Int32)">
            <summary>
            
            </summary>
            <param name="target"></param>
            <param name="eolIndex"></param>
            <param name="waitTimeInSec"></param>
            <returns></returns>
        </member>
        <member name="M:NTL_HIL.NTL_HIL.SetEolData(System.Byte,System.Byte,System.Byte,System.String,System.String,System.String)">
            <summary>
            Sets the eol data
            </summary>
            <param name="target">The target</param>
            <param name="eolIndex">Index of the eol</param>
            <param name="eolId">The eol identifier</param>
            <param name="eolTesterVersion">The eol tester version</param>
            <param name="eolTestDate">The eol test date</param>
            <param name="eolTestResult">The eol test result</param>
            <returns></returns>
        </member>
        <member name="M:NTL_HIL.NTL_HIL.SetEolDataBytes(System.Byte,System.Byte,System.String,System.String)">
            <summary>
            Sets the eol data bytes
            </summary>
            <param name="target">The target</param>
            <param name="eolIndex">Index of the eol</param>
            <param name="eolTestResult">The eol test result</param>
            <param name="eolTestResultMask">The eol test result mask</param>
            <returns></returns>
        </member>
        <member name="M:NTL_HIL.NTL_HIL.RequestCalibrationData(System.Byte,System.Byte,System.Int32)">
            <summary>
            Calibrates the data
            </summary>
            <param name="target">The target</param>
            <param name="calibrationDataId">The calibration data identifier</param>
            <returns></returns>
        </member>
        <member name="M:NTL_HIL.NTL_HIL.RequestClassBSignature(System.Byte,System.Int32)">
            <summary>
            Gets the class b signature
            </summary>
            <param name="target">The target</param>
            <returns></returns>
        </member>
        <member name="M:NTL_HIL.NTL_HIL.StoreStaticData(System.Byte)">
            <summary>
            Stores the staticdata
            </summary>
            <param name="target">The target</param>
            <returns></returns>
        </member>
        <member name="T:NTL_HIL.NTL_HIL.Offset">
            <summary>
            <c>Offset</c> enum is defined for multiple compartments
            </summary>
        </member>
        <member name="F:NTL_HIL.NTL_HIL.Offset.ZERO">
            <summary>            </summary>
        </member>
        <member name="F:NTL_HIL.NTL_HIL.Offset.ONE">
            <summary>            </summary>
        </member>
        <member name="F:NTL_HIL.NTL_HIL.Offset.TWO">
            <summary>            /// </summary>
        </member>
        <member name="F:NTL_HIL.NTL_HIL.Offset.THREE">
            <summary>            /// </summary>
        </member>
        <member name="F:NTL_HIL.NTL_HIL.Offset.FOUR">
            <summary>            /// </summary>
        </member>
        <member name="F:NTL_HIL.NTL_HIL.Offset.FIVE">
            <summary>            /// </summary>
        </member>
        <member name="F:NTL_HIL.NTL_HIL.Offset.SIX">
            <summary>            /// </summary>
        </member>
        <member name="F:NTL_HIL.NTL_HIL.Offset.SEVEN">
            <summary>            /// </summary>
        </member>
        <member name="F:NTL_HIL.NTL_HIL.Offset.EIGHT">
            <summary>            /// </summary>
        </member>
        <member name="F:NTL_HIL.NTL_HIL.Offset.NINE">
            <summary>            /// </summary>
        </member>
        <member name="F:NTL_HIL.NTL_HIL.Offset.TEN">
            <summary>            /// </summary>
        </member>
        <member name="F:NTL_HIL.NTL_HIL.Offset.ELEVEN">
            <summary>            /// </summary>
        </member>
        <member name="F:NTL_HIL.NTL_HIL.Offset.TWELVE">
            <summary>            /// </summary>
        </member>
        <member name="F:NTL_HIL.NTL_HIL.Offset.THRITEEN">
            <summary>            /// </summary>
        </member>
        <member name="F:NTL_HIL.NTL_HIL.Offset.FOURTEEN">
            <summary>            /// </summary>
        </member>
        <member name="F:NTL_HIL.NTL_HIL.Offset.FIFTEEN">
            <summary>            /// </summary>
        </member>
        <member name="M:NTL_HIL.NTL_HIL.RequestSpecificVariable(System.Byte,System.Byte,System.Int32)">
            <summary>
            Get Specific Variable
            </summary>
            <param name="target"></param>
            <param name="waitTimeInSec"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:NTL_HIL.NTL_HIL.PublishStreamData(System.Byte,System.Byte,System.Byte,System.Int32)">
            <summary>
            
            </summary>
            <param name="target"></param>
            <param name="lsb"></param>
            <param name="msb"></param>
            <param name="waitTimeInSec"></param>
            <returns></returns>
        </member>
        <member name="M:NTL_HIL.NTL_HIL.PublishFixedVariableMedata(System.Byte,System.Byte,System.Int32)">
            <summary>
            
            </summary>
            <param name="target"></param>
            <param name="index"></param>
            <param name="waitTimeInSec"></param>
            <returns></returns>
        </member>
        <member name="M:NTL_HIL.NTL_HIL.PublishAcquisitionConfiguration(System.Byte,System.Int32)">
            <summary>
            
            </summary>
            <param name="target"></param>
            <param name="waitTimeInSec"></param>
        </member>
        <member name="M:NTL_HIL.NTL_HIL.PublishNumberOfVariables(System.Byte,System.Int32)">
            <summary>
            
            </summary>
            <param name="target"></param>
            <param name="waitTimeInSec"></param>
        </member>
        <member name="M:NTL_HIL.NTL_HIL.EnablePeriodicData(System.Byte,System.Byte)">
            <summary>
            
            </summary>
            <param name="target"></param>
            <param name="startStop"></param>
            <param name="waitTimeInSec"></param>
        </member>
        <member name="M:NTL_HIL.NTL_HIL.DeselectAllVariables(System.Byte)">
            <summary>
            
            </summary>
            <param name="target"></param>
        </member>
        <member name="M:NTL_HIL.NTL_HIL.SelectAllVariables(System.Byte)">
            <summary>
            
            </summary>
            <param name="target"></param>
        </member>
        <member name="M:NTL_HIL.NTL_HIL.DeselectSpecificVariables(System.Byte,System.Byte[])">
            <summary>
            
            </summary>
            <param name="target"></param>
            <param name="listofVariables"></param>
        </member>
        <member name="M:NTL_HIL.NTL_HIL.SelectSpecificVariables(System.Byte,System.Byte[])">
            <summary>
            
            </summary>
            <param name="target"></param>
            <param name="listofVariables"></param>
        </member>
        <member name="M:NTL_HIL.NTL_HIL.SetPeriodicPublication(System.Byte,System.Byte,System.Byte)">
            <summary>
            
            </summary>
            <param name="target"></param>
            <param name="method"></param>
            <param name="millisecondPeriod"></param>
        </member>
        <member name="M:NTL_HIL.NTL_HIL.DefineMemoryMappedVariable(System.Byte,System.Byte[])">
            <summary>
            
            </summary>
            <param name="target"></param>
            <param name="listofMemoryMapVariable"></param>
        </member>
        <member name="M:NTL_HIL.NTL_HIL.UndefineMemoryMappedVariable(System.Byte,System.Byte[])">
            <summary>
            
            </summary>
            <param name="target"></param>
            <param name="listofMemoryMapVariable"></param>
        </member>
        <member name="M:NTL_HIL.NTL_HIL.ConfigureOnChangeBehavior(System.Byte,System.Byte,System.Byte)">
            <summary>
            
            </summary>
            <param name="target"></param>
            <param name="index"></param>
            <param name="onChangeBehavior"></param>
        </member>
        <member name="M:NTL_HIL.NTL_HIL.RequestFixedVariableMetadata(System.Byte,System.Byte)">
            <summary>
            
            </summary>
            <param name="target"></param>
            <param name="index"></param>
        </member>
        <member name="M:NTL_HIL.NTL_HIL.RequestAcquisitionConfiguration(System.Byte)">
            <summary>
            
            </summary>
            <param name="target"></param>
        </member>
        <member name="M:NTL_HIL.NTL_HIL.RequestNumberOfVariables(System.Byte)">
            <summary>
            
            </summary>
            <param name="target"></param>
        </member>
        <member name="M:NTL_HIL.NTL_HIL.WriteFixedVariable(System.Byte,System.Byte[])">
            <summary>
            
            </summary>
            <param name="target"></param>
            <param name="listofMemoryMapVariable"></param>
        </member>
        <member name="M:NTL_HIL.NTL_HIL.ReadSelectedVariableXML(System.String)">
            <summary>
            Reads the all memory mapped variable configured using memory mapped variable tool.
            Must be done before using this feature.
            </summary>
            <param name="fullPath">File Name with full path ex. C:\TestProjects\LDAP-ID\ProjectName\MemoryMappedVariable.xml</param>
        </member>
        <member name="M:NTL_HIL.NTL_HIL.RegisterVariables">
            <summary>
            
            </summary>
        </member>
        <member name="M:NTL_HIL.NTL_HIL.RegisterVariables(System.UInt32[])">
            <summary>
            
            </summary>
            <param name="exclusivelist"></param>
        </member>
        <member name="M:NTL_HIL.NTL_HIL.RequestSpecificVariable(System.String)">
            <summary>
            
            </summary>
            <param name="variablename"></param>
        </member>
        <member name="M:NTL_HIL.NTL_HIL.SearchVariableNameInXML(System.String)">
            <summary>
            
            </summary>
            <param name="variablename"></param>
            <returns></returns>
        </member>
        <member name="T:NTL_HIL.SettingFileProgressClass">
            <summary>    /// </summary>
        </member>
        <member name="P:NTL_HIL.SettingFileProgressClass.completion">
            <summary>    /// </summary>
        </member>
        <member name="P:NTL_HIL.SettingFileProgressClass.status">
            <summary>    /// </summary>
        </member>
        <member name="M:NTL_HIL.SettingFileProgressClass.Report(NTL.SettingFileProgressArgs)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="T:NTL_HIL.API11Payload">
            <summary>
            Class used for creating paload for regulation
            </summary>
        </member>
        <member name="F:NTL_HIL.API11Payload.UserName">
            <summary>
            
            </summary>
        </member>
        <member name="F:NTL_HIL.API11Payload.DateTime">
            <summary>
            
            </summary>
        </member>
        <member name="F:NTL_HIL.API11Payload.MachineName">
            <summary>
            
            </summary>
        </member>
        <member name="F:NTL_HIL.API11Payload.ProjectName">
            <summary>
            
            </summary>
        </member>
        <member name="F:NTL_HIL.API11Payload.ReferenceSettingFileID">
            <summary>
            
            </summary>
        </member>
        <member name="F:NTL_HIL.API11Payload.ProductType">
            <summary>
            
            </summary>
        </member>
        <member name="F:NTL_HIL.API11Payload.CurrentRegulationByteArray">
            <summary>
            
            </summary>
        </member>
        <member name="M:NTL_HIL.API11Payload.ReadXmlFile">
            <summary>
            
            </summary>
        </member>
        <member name="M:NTL_HIL.API11Payload.ReadStatusXMLFile">
            <summary>
            
            </summary>
        </member>
        <member name="M:NTL_HIL.API11Payload.ReadAPI11XML">
            <summary>
            
            </summary>
        </member>
        <member name="M:NTL_HIL.API11Payload.RegulationsList(System.IO.Stream)">
            <summary>
            
            </summary>
            <param name="XMLstream"></param>
            <returns></returns>
        </member>
        <member name="M:NTL_HIL.API11Payload.ProductTypes(System.IO.Stream)">
            <summary>
            /
            </summary>
            <param name="XMLstream"></param>
            <returns></returns>
        </member>
        <member name="M:NTL_HIL.API11Payload.Update(NTL_HIL.Cooking.Regulation,System.Byte)">
            <summary>
            
            </summary>
            <param name="cookregname"></param>
            <param name="value"></param>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:NTL_HIL.API11Payload.Update(NTL_HIL.Refrigeration.Regulation,System.Byte)">
            <summary>
            
            </summary>
            <param name="refregname"></param>
            <param name="value"></param>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:NTL_HIL.API11Payload.Update(NTL_HIL.HAWasher.Regulation,System.Byte)">
            <summary>
            
            </summary>
            <param name="hawasherregname"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NTL_HIL.API11Payload.Update(NTL_HIL.VAWasher.Regulation,System.Byte)">
            <summary>
            
            </summary>
            <param name="vawasherregname"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NTL_HIL.API11Payload.Update(NTL_HIL.Dryer.Regulation,System.Byte)">
            <summary>
            
            </summary>
            <param name="dryerregname"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NTL_HIL.API11Payload.ResetRegulation">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="T:NTL_HIL.Regulation">
            <summary>
            Object Class used for serialization(saving the state of the object)
            </summary>
        </member>
        <member name="T:NTL_HIL.ApplicableRegulations">
            <summary>
            
            </summary>
        </member>
        <member name="T:NTL_HIL.ApplicableStatusVariables">
            <summary>
            
            </summary>
        </member>
        <member name="T:NTL_HIL.MemoryVariables">
            <summary>
            
            </summary>
        </member>
        <member name="M:NTL_HIL.MemoryVariables.#ctor(System.String,System.String,System.UInt32,System.UInt32,System.UInt32,System.Int32,System.UInt32)">
            <summary>
            
            </summary>
            <param name="testlabel"></param>
            <param name="firmwarelabel"></param>
            <param name="address"></param>
            <param name="dimension"></param>
            <param name="type"></param>
            <param name="size"></param>
            <param name="index"></param>
        </member>
        <member name="P:NTL_HIL.MemoryVariables.TestLabel">
            <summary>/// </summary>
        </member>
        <member name="P:NTL_HIL.MemoryVariables.FirmWareLabel">
            <summary>/// </summary>
        </member>
        <member name="P:NTL_HIL.MemoryVariables.Address">
            <summary>/// </summary>
        </member>
        <member name="P:NTL_HIL.MemoryVariables.Dimension">
            <summary>/// </summary>
        </member>
        <member name="P:NTL_HIL.MemoryVariables.Type">
            <summary>/// </summary>
        </member>
        <member name="P:NTL_HIL.MemoryVariables.Size">
            <summary>/// </summary>
        </member>
        <member name="P:NTL_HIL.MemoryVariables.Index">
            <summary>/// </summary>
        </member>
        <member name="T:NTL_HIL.Refrigeration">
            <summary>///     /// </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
        </member>
        <member name="F:NTL_HIL.Refrigeration.SettingFileWritingCompletion">
            <summary>///     /// </summary>
        </member>
        <member name="F:NTL_HIL.Refrigeration.SettingFileWritingStatus">
            <summary>///     /// </summary>
        </member>
        <member name="M:NTL_HIL.Refrigeration.DownloadSettingFile(System.String,System.Byte,System.IO.FileStream)">
            <summary>///     /// </summary>
        </member>
        <member name="P:NTL_HIL.Refrigeration.Target">
            <summary>
            Target means node id
            </summary>
        </member>
        <member name="T:NTL_HIL.Refrigeration.Regulation">
            <summary>
            
            </summary>
        </member>
        <member name="T:NTL_HIL.Refrigeration.LOADID">
            <summary>
            Refrigeration : Enum for all load mapping from NKM file
            </summary>
        </member>
        <member name="M:NTL_HIL.Refrigeration.Init(System.String,System.Byte)">
            <summary>
            Setting and initializing communication port
            </summary>
            <param name="comPort">Port name by which CCB2 device is connected</param>
            <param name="deviceAddress">Device address to set</param>
        </member>
        <member name="M:NTL_HIL.Refrigeration.SetExternalControl">
            <summary>
            API 11 : Uses API 11 to set acu to external control to be controlled by PC
            </summary>
        </member>
        <member name="M:NTL_HIL.Refrigeration.ModeHeartBeat">
            <summary>
            
            </summary>
        </member>
        <member name="M:NTL_HIL.Refrigeration.ResumeNormalControl">
            <summary>
            
            </summary>
        </member>
        <member name="M:NTL_HIL.Refrigeration.SetRegulation(System.Byte,System.Byte,System.Byte[])">
            <summary>
            Set regulation
            </summary>
            <param name="boardId">Board Id</param>
            <param name="regulationId">Regulation Id</param>
            <param name="param">Parameters required to set regulation</param>
        </member>
        <member name="M:NTL_HIL.Refrigeration.SetRegulation(System.Byte,System.Byte[])">
            <summary>
            
            </summary>
            <param name="target"></param>
            <param name="param"></param>
        </member>
        <member name="M:NTL_HIL.Refrigeration.GetRegulationsData(System.Byte,System.Int32)">
            <summary>
            Gets the regulations data
            </summary>
            <param name="boardId">The target</param>
            <param name="waitTimeInSec">Time in secs</param>
            <returns>Byte array</returns>
        </member>
        <member name="M:NTL_HIL.Refrigeration.GetNumberOfCycle(System.Byte,System.Int32)">
            <summary>
            Gets the number of cycle
            </summary>
            <param name="boardId">The target</param>
            <param name="waitTimeInSec">Time in secs</param>
            <returns>Byte</returns>
        </member>
        <member name="M:NTL_HIL.Refrigeration.GetRegulationById(System.Byte,System.Byte,System.Int32)">
            <summary>
            Gets the regulation by identifier
            </summary>
            <param name="boardId">The target</param>
            <param name="functionId">The function identifier</param>
            <param name="waitTimeInSec">Time in secs</param>
            <returns>Byte</returns>
        </member>
        <member name="M:NTL_HIL.Refrigeration.GetStatusData(System.Byte,System.Int32)">
            <summary>
            Gets the status data
            </summary>
            <param name="boardId">The target</param>
            <param name="waitTimeInSec">Time in secs</param>
            <returns>Byte array</returns>
        </member>
        <member name="M:NTL_HIL.Refrigeration.GetSystemMode(System.Byte,System.Int32)">
            <summary>
            Get system mode
            </summary>
            <param name="boardId">Board Id</param>
            <param name="waitTimeInSec">Time in secs</param>
            <returns></returns>
        </member>
        <member name="M:NTL_HIL.Refrigeration.GetStatusStructure(System.Byte,System.Int32)">
            <summary>
            Gets the status structure
            </summary>
            <param name="boardId">The target</param>
            <param name="waitTimeInSec">Time in secs</param>
            <returns>Byte array</returns>
        </member>
        <member name="M:NTL_HIL.Refrigeration.SetSystemMode(System.Byte,NTL.EnumModeType,NTL.EnumSubModeType)">
            <summary>
            Sets the system mode.
            </summary>
            <param name="target">The target.</param>
            <param name="mode">The mode.</param>
            <param name="subMode">The sub mode.</param>
        </member>
        <member name="M:NTL_HIL.Refrigeration.StartLog(System.String)">
            <summary>
            
            </summary>
            <param name="path"></param>
        </member>
        <member name="M:NTL_HIL.Refrigeration.StopLog">
            <summary>
            
            </summary>
        </member>
        <member name="M:NTL_HIL.Refrigeration.StopThread">
            <summary>
            
            </summary>
        </member>
        <member name="M:NTL_HIL.Refrigeration.SendRevealMessage(System.Byte,System.Byte[],System.Boolean,System.Double)">
            <summary>
            Sends raw reveal message on bus
            </summary>
            <param name="boardId">Board id</param>
            <param name="data">Packet to send on bus</param>
            <param name="blockingExecution">Optional parameter</param>
            <param name="timeout">Optional parameter</param>
            <returns>Returns bool</returns>
        </member>
        <member name="M:NTL_HIL.Refrigeration.ReadClientData(WhirlpoolCommunication.Packets.SimpleWhirlpoolPacket,System.Int32,WhirlpoolCommunication.Packets.SimpleWhirlpoolPacket)">
            <summary>
            
            </summary>
            <param name="desiredData"></param>
            <param name="waitTimeInSec"></param>
            <param name="maskData"></param>
            <returns></returns>
        </member>
        <member name="M:NTL_HIL.Refrigeration.ReadClientData(WhirlpoolCommunication.Packets.SimpleWhirlpoolPacket,WhirlpoolCommunication.Packets.SimpleWhirlpoolPacket)">
            <summary>
            
            </summary>
            <param name="desiredData"></param>
            <param name="maskData"></param>
            <returns></returns>
        </member>
        <member name="M:NTL_HIL.Refrigeration.ReadClientDataLatest(WhirlpoolCommunication.Packets.SimpleWhirlpoolPacket,System.Int32)">
            <summary>
            
            </summary>
            <param name="desiredData"></param>
            <param name="waitTimeInSec"></param>
            <returns></returns>
        </member>
        <member name="M:NTL_HIL.Refrigeration.ReadClientDataLatest(WhirlpoolCommunication.Packets.SimpleWhirlpoolPacket,WhirlpoolCommunication.Packets.SimpleWhirlpoolPacket,System.Int32)">
            <summary>
            
            </summary>
            <param name="desiredData"></param>
            <param name="maskData"></param>
            <param name="waitTimeInSec"></param>
            <returns></returns>
        </member>
        <member name="M:NTL_HIL.Refrigeration.SetLoad(System.Byte,System.Byte,NTL_HIL.NTL_HIL.SetState,System.Byte)">
            <summary>
            Low level interface : to control specific load provided as per parameters
            Opcode 0x01
            </summary>
            <param name="boardId">Board node id</param>
            <param name="loadName">Load name. For example : loadName = Refrigeration.LOADID.DLB1 for DLB1, Refrigeration.LOADID.Bake1 for Bake1</param>
            <param name="state">Load state. For example : state = Refrigeration.SETSTATE.ON, Refrigeration.SETSTATE.OFF</param>
            <param name="loadSize">Load size</param>
            <remarks></remarks>
        </member>
        <member name="M:NTL_HIL.Refrigeration.SetLoad(System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Low level interface : to control specific load provided as per parameters
            Opcode 0x01
            </summary>
            <param name="boardId">Board node id</param>
            <param name="loadId">Load id by index</param>
            <param name="loadSize">Load size</param>
            <param name="state">Load state</param>
        </member>
        <member name="M:NTL_HIL.Refrigeration.GetLoadData(System.Byte,System.Byte,System.Int32)">
            <summary>
            API Low level : get load data
            Opcode 0x02
            </summary>
            <param name="boardId">Board id</param>
            <param name="loadId">Load id by index</param>
            <param name="waitTimeInSec">Time in secs</param>
            <returns>Byte array</returns>
        </member>
        <member name="M:NTL_HIL.Refrigeration.GetLoadData(System.Byte,System.Byte)">
            <summary>
            API Low level : get load data
            Opcode 0x02
            </summary>
            <param name="boardId">Board id</param>
            <param name="loadName">Load name. For example : loadName = Refrigeration.LOADID.DLB1 for DLB1, Refrigeration.LOADID.Bake1 for Bake1</param>
            <returns>Byte array</returns>
        </member>
        <member name="M:NTL_HIL.Refrigeration.RequestLliData(System.Byte,System.Byte,System.Byte,System.Int32)">
            <summary>
            Gets the lli data
            Opocode 0x03
            </summary>
            <param name="boardId">The boardId</param>
            <param name="lliType">Type of the lli</param>
            <param name="lliPosition">The lli position</param>
            <param name="waitTimeInSec">Time in secs</param>
            <returns>Byte array</returns>
        </member>
        <member name="M:NTL_HIL.Refrigeration.RequestGIData(System.Byte,System.Byte,System.Int32)">
            <summary>
            Gets the gi data
            Opocode 0x04
            </summary>
            <param name="boardId">The boardId</param>
            <param name="giID">The gi identifier</param>
            <param name="waitTimeInSec">Time in secs</param>
            <returns>Byte array</returns>
        </member>
        <member name="M:NTL_HIL.Refrigeration.RequestAllLoadConfiguration(System.Byte,System.Int32)">
            <summary>
            Not validated
            Opocode 0x05
            </summary>
            <param name="boardId">Board Id</param>
            <param name="waitTimeInSec">Time in secs</param>
            <returns></returns>
        </member>
        <member name="M:NTL_HIL.Refrigeration.RequestAllLliConfiguration(System.Byte,System.Int32)">
            <summary>
            Not validated
            Opocode 0x06
            </summary>
            <param name="boardId">Board Id</param>
            <param name="waitTimeInSec">Time in secs</param>
            <returns></returns>
        </member>
        <member name="M:NTL_HIL.Refrigeration.RequestAllGiConfiguration(System.Byte,System.Int32)">
            <summary>
            Not validated
            Opocode 0x07
            </summary>
            <param name="boardId">Board Id</param>
            <param name="waitTimeInSec">Time in secs</param>
            <returns></returns>
        </member>
        <member name="M:NTL_HIL.Refrigeration.TurnAllLoadsOff(System.Byte)">
            <summary>
            Sets all load off
            Opocode 0x11
            </summary>
            <param name="boardId">Board id</param>
            <returns></returns>
        </member>
        <member name="M:NTL_HIL.Refrigeration.SetDebugLabel(System.Byte,System.Byte,System.String)">
            <summary>
            Sets the debuglabel
            Opocode 0x12
            </summary>
            <param name="boardId">The boardId</param>
            <param name="debugFunctionIndex">Index of the debug function</param>
            <param name="label">The label</param>
            <returns></returns> 
        </member>
        <member name="M:NTL_HIL.Refrigeration.EngageTestCycle(System.Byte,System.Byte)">
            <summary>
            Not validated
            Opocode 0x1B
            </summary>
            <param name="boardId"></param>
            <param name="testCycle"></param>
        </member>
        <member name="M:NTL_HIL.Refrigeration.HmiPlaySound(System.Byte,System.Byte,System.Byte)">
            <summary>
            Not validated
            Opocode 0x15
            </summary>
            <param name="boardId"></param>
            <param name="soundIndex"></param>
            <param name="volume"></param>
        </member>
        <member name="M:NTL_HIL.Refrigeration.HmiSetObject(System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Not validated
            Opocode 0x14
            </summary>
            <param name="boardId"></param>
            <param name="objectType"></param>
            <param name="objectIndex"></param>
            <param name="objectValue"></param>
        </member>
        <member name="M:NTL_HIL.Refrigeration.PhaseTestCycle(System.Byte,System.Byte)">
            <summary>
            Not validated
            Opocode 0x1C
            </summary>
            <param name="boardId"></param>
            <param name="testPhaseCycle"></param>
        </member>
        <member name="M:NTL_HIL.Refrigeration.SetDebugVariable(System.Byte,System.Byte,System.Byte[])">
            <summary>
            Not validated
            Opocode 0x13
            </summary>
            <param name="boardId"></param>
            <param name="debugFunctionIndex"></param>
            <param name="varaiableValue"></param>
        </member>
        <member name="M:NTL_HIL.Refrigeration.SetExtractGIs(System.Byte,System.Byte)">
            <summary>
            Not validated
            Opocode 0x1E
            </summary>
            <param name="boardId"></param>
            <param name="extractGIsState"></param>
        </member>
        <member name="M:NTL_HIL.Refrigeration.SetExtractLoads(System.Byte,System.Byte)">
            <summary>
            Not validated
            Opocode 0x1D
            </summary>
            <param name="boardId"></param>
            <param name="extractLoadState"></param>
        </member>
        <member name="M:NTL_HIL.Refrigeration.SetTestStorage(System.Byte,System.Byte)">
            <summary>
            Not validated
            Opocode 0x1A
            </summary>
            <param name="boardId"></param>
            <param name="storage"></param>
        </member>
        <member name="M:NTL_HIL.Refrigeration.ProductTypes(System.IO.Stream)">
            <summary>
            Read NKM XML file and get product type
            </summary>
            <param name="XMLStream">XML file</param>
            <returns>Product type refernce containing all data</returns>
        </member>
        <member name="M:NTL_HIL.Refrigeration.PilotType(System.IO.Stream)">
            <summary>
            Read NKM XML file and get pilot type
            </summary>
            <param name="XMLStream">XML file</param>
            <returns>Pilot type refernce containing all data</returns>
        </member>
        <member name="M:NTL_HIL.Refrigeration.LoadsList(System.IO.Stream)">
            <summary>
            Read NKM XML file and get load list
            </summary>
            <param name="XMLStream">XML file</param>
            <returns>Load list refernce containing all data</returns>
        </member>
        <member name="M:NTL_HIL.Refrigeration.LowLevelInputList(System.IO.Stream)">
            <summary>
            Read NKM XML file and get low level input info
            </summary>
            <param name="XMLStream">XML file</param>
            <returns>Low level input info refernce containing all data</returns>
        </member>
        <member name="M:NTL_HIL.Refrigeration.GenericInputList(System.IO.Stream)">
            <summary>
            Read NKM XML file and get generic input info
            </summary>
            <param name="XMLStream">XML file</param>
            <returns>Generic input info refernce containing all data</returns>
        </member>
        <member name="M:NTL_HIL.Refrigeration.RegulationsList(System.IO.Stream)">
            <summary>
            Read NKM XML file and regulations list
            </summary>
            <param name="XMLStream">XML file</param>
            <returns>Regulations list refernce containing all data</returns>
        </member>
        <member name="M:NTL_HIL.Refrigeration.CyclesList(System.IO.Stream)">
            <summary>
            Read NKM XML file and cycles list
            </summary>
            <param name="XMLStream">XML file</param>
            <returns>Cycles list refernce containing all data</returns>
        </member>
        <member name="M:NTL_HIL.Refrigeration.FaultsList(System.IO.Stream)">
            <summary>
            Read NKM XML file and fault list
            </summary>
            <param name="XMLStream">XML file</param>
            <returns>Fault list refernce containing all data</returns>
        </member>
        <member name="M:NTL_HIL.Refrigeration.RequestApplianceData(System.Byte)">
            <summary>
            Gets the appliancedata
            </summary>
            <param name="boardId">Board Id</param>
            <returns></returns>
        </member>
        <member name="M:NTL_HIL.Refrigeration.RequestBoardData(System.Byte,System.Byte)">
            <summary>
            Gets the board data
            </summary>
            <param name="boardId">Board Id</param>
            <param name="boardIndex">Board Index</param>
            <returns></returns>
        </member>
        <member name="M:NTL_HIL.Refrigeration.RequestProjectData(System.Byte,System.Byte,System.Byte)">
            <summary>
            Gets the project data
            </summary>
            <param name="boardId">Board Id</param>
            <param name="boardIndex">Index of the board</param>
            <param name="projectIndex">Index of the project</param>
            <returns></returns>
        </member>
        <member name="M:NTL_HIL.Refrigeration.RequestServiceData(System.Byte,System.Int32)">
            <summary>
            
            </summary>
            <param name="boardId"></param>
            <param name="waitTimeInSec"></param>
            <returns></returns>
        </member>
        <member name="M:NTL_HIL.Refrigeration.RequestEolData(System.Byte,System.Byte,System.Int32)">
            <summary>
            
            </summary>
            <param name="boardId"></param>
            <param name="eolIndex"></param>
            <param name="waitTimeInSec"></param>
            <returns></returns>
        </member>
        <member name="M:NTL_HIL.Refrigeration.RequestFVTData(System.Byte,System.Byte,System.Int32)">
            <summary>
            
            </summary>
            <param name="boardId"></param>
            <param name="fvtIndex"></param>
            <param name="waitTimeInSec"></param>
            <returns></returns>
        </member>
        <member name="M:NTL_HIL.Refrigeration.RequestClassBSignature(System.Byte,System.Int32)">
            <summary>
            
            </summary>
            <param name="boardId"></param>
            <param name="waitTimeInSec"></param>
            <returns></returns>
        </member>
        <member name="M:NTL_HIL.Refrigeration.RequestCalibrationData(System.Byte,System.Byte,System.Int32)">
            <summary>
            
            </summary>
            <param name="boardId"></param>
            <param name="calibrationDataId"></param>
            <param name="waitTimeInSec"></param>
            <returns></returns>
        </member>
        <member name="M:NTL_HIL.Refrigeration.SetBoardData(System.Byte,System.Byte,System.String,System.String,System.String,System.Byte,System.Byte)">
            <summary>
            Sets the board data
            </summary>
            <param name="boardId">Board Id</param>
            <param name="boardIndex">Board index</param>
            <param name="boardPartNumber">Board part number</param>
            <param name="boardRevision">Board revision</param>
            <param name="boardSerialNumber">Board serial number</param>
            <param name="boardReplacment">Board replacement</param>
            <param name="boardNumberOfProjects">Number of projects</param>
        </member>
        <member name="M:NTL_HIL.Refrigeration.SetEolData(System.Byte,System.Byte,System.Byte,System.String,System.String,System.String)">
            <summary>
            Sets the eol data
            </summary>
            <param name="boardId">Board Id</param>
            <param name="eolIndex">EOL index</param>
            <param name="eolId">EOL Id</param>
            <param name="eolTesterVersion">EOL test version</param>
            <param name="eolTestDate">EOL test date</param>
            <param name="eolTestResult">EOL test result</param>
        </member>
        <member name="M:NTL_HIL.Refrigeration.SetEolDataBytes(System.Byte,System.Byte,System.String,System.String)">
            <summary>
            Sets the eol data bytes
            </summary>
            <param name="boardId">Board Id</param>
            <param name="eolIndex">EOL index</param>
            <param name="eolTestResult">EOL test result</param>
            <param name="eolTestResultMask">EOL test result mask</param>
        </member>
        <member name="M:NTL_HIL.Refrigeration.SetFvtData(System.Byte,System.Byte,System.Byte,System.String,System.String,System.String)">
            <summary>
            Sets the FVT data
            </summary>
            <param name="boardId">Board Id</param>
            <param name="fvtIndex">FVT index</param>
            <param name="fvtId">FVT Id</param>
            <param name="fvtTesterVersion">FVT test version</param>
            <param name="fvtTestDate">FVT test date</param>
            <param name="fvtTestResult">FVT test result</param>
        </member>
        <member name="M:NTL_HIL.Refrigeration.SetFvtDataBytes(System.Byte,System.Byte,System.String,System.String)">
            <summary>
            Sets the FVT data bytes
            </summary>
            <param name="boardId">Board Id</param>
            <param name="fvtIndex">FVT index</param>
            <param name="fvtTestResult">FVT test result</param>
            <param name="fvtTestResultMask">FVT test result mask</param>
        </member>
        <member name="M:NTL_HIL.Refrigeration.SetServiceData(System.Byte,System.Byte,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Sets the serice data
            </summary>
            <param name="boardId">Board Id</param>
            <param name="serviceTesterId">Service tester Id</param>
            <param name="serviceTesterVersion">Service tester version</param>
            <param name="serviceTestDate">Service tester date</param>
            <param name="serviceTestAge">Service test age</param>
            <param name="serviceTestDuration">Service test duration</param>
            <param name="serviceTestResult">Service test result</param>
        </member>
        <member name="M:NTL_HIL.Refrigeration.StoreStaticData(System.Byte)">
            <summary>
            Stores the staticdata
            </summary>
            <param name="boardId">Board Id</param>
        </member>
        <member name="M:NTL_HIL.Refrigeration.SetApplianceData(System.Byte,System.String,System.String,System.Byte)">
            <summary>
            Sets the appliance data
            </summary>
            <param name="boardId">Board Id</param>
            <param name="modelNumber">Model number</param>
            <param name="serialNumber">Serial number</param>
            <param name="numberOfBoards">Number of boards</param>
        </member>
        <member name="T:NTL_HIL.Refrigeration.RefSystemVariable">
            <summary>
            
            </summary>
        </member>
        <member name="T:NTL_HIL.Refrigeration.DataType">
            <summary>/// /// </summary>
        </member>
        <member name="F:NTL_HIL.Refrigeration.DataType.U8">
            <summary>/// /// </summary>
        </member>
        <member name="F:NTL_HIL.Refrigeration.DataType.U16">
            <summary>/// /// </summary>
        </member>
        <member name="F:NTL_HIL.Refrigeration.DataType.U32">
            <summary>/// /// </summary>
        </member>
        <member name="F:NTL_HIL.Refrigeration.DataType.U64">
            <summary>/// /// </summary>
        </member>
        <member name="F:NTL_HIL.Refrigeration.DataType.S8">
            <summary>/// /// </summary>
        </member>
        <member name="F:NTL_HIL.Refrigeration.DataType.S16">
            <summary>/// /// </summary>
        </member>
        <member name="F:NTL_HIL.Refrigeration.DataType.S32">
            <summary>/// /// </summary>
        </member>
        <member name="F:NTL_HIL.Refrigeration.DataType.S64">
            <summary>/// /// </summary>
        </member>
        <member name="M:NTL_HIL.Refrigeration.RequestSpecificVariable(System.Byte,System.Byte,System.Int32)">
            <summary>
            Get specific variable
            </summary>
            <param name="boardId">Board Id</param>
            <param name="index">Index</param>
            <param name="waitTimeInSec">Time in secs</param>
            <returns>Byte array</returns>
        </member>
        <member name="M:NTL_HIL.Refrigeration.RequestSpecificVariable(System.Byte,System.Byte,NTL_HIL.Refrigeration.DataType,System.Byte)">
            <summary>
            Request specific variable as per varibale id
            </summary>
            <param name="boardId">ACU node ID</param>
            <param name="variableId">Variable name from NKMParser.dll</param>
            <param name="offset">Position of the expected data</param>
            <param name="dataType">Data type</param>
            <returns>Returns array if offset is not provided or wrong offset provided\nReturns single value when offset sent withing limits</returns>
        </member>
        <member name="M:NTL_HIL.Refrigeration.GetData(System.Byte[],System.Byte,System.Byte)">
            <summary>
            
            </summary>
            <param name="payload"></param>
            <param name="offset"></param>
            <param name="numberOfBytes"></param>
            <returns></returns>
        </member>
        <member name="M:NTL_HIL.Refrigeration.RequestSpecificVariable(System.String)">
            <summary>
            
            </summary>
            <param name="variablename"></param>
            <returns></returns>
        </member>
        <member name="M:NTL_HIL.Refrigeration.ReadSelectedVariableXML(System.String)">
            <summary>
            
            </summary>
            <param name="path"></param>
        </member>
        <member name="M:NTL_HIL.Refrigeration.RegisterVariables">
            <summary>
            
            </summary>
        </member>
        <member name="M:NTL_HIL.Refrigeration.RegisterVariables(System.UInt32[])">
            <summary>
            
            </summary>
            <param name="exclusivelist"></param>
        </member>
        <member name="M:NTL_HIL.Refrigeration.PublishAcquisitionConfiguration(System.Byte,System.Int32)">
            <summary>
            Publish acquisition configuration
            </summary>
            <param name="boardId">Board Id</param>
            <param name="waitTimeInSec">Time in secs</param>
            <returns>Byte array</returns>
        </member>
        <member name="M:NTL_HIL.Refrigeration.PublishFixedVariableMedata(System.Byte,System.Byte,System.Int32)">
            <summary>
            Publish fixed variable metadata
            </summary>
            <param name="boardId">Board Id</param>
            <param name="waitTimeInSec">Time in secs</param>
            <param name="index">Index</param>
            <returns>Byte array</returns>
        </member>
        <member name="M:NTL_HIL.Refrigeration.PublishStreamData(System.Byte,System.Byte,System.Byte,System.Int32)">
            <summary>
            
            </summary>
            <param name="boardId"></param>
            <param name="lsb"></param>
            <param name="msb"></param>
            <param name="waitTimeInSec"></param>
            <returns></returns>
        </member>
        <member name="M:NTL_HIL.Refrigeration.PublishNumberOfVariables(System.Byte,System.Int32)">
            <summary>
            Publish number of variables
            </summary>
            <param name="boardId">Board Id</param>
            <param name="waitTimeInSec">Time in secs</param>
            <returns>Byte array</returns>
        </member>
        <member name="M:NTL_HIL.Refrigeration.ConfigureOnChangeBehavior(System.Byte,System.Byte,System.Byte)">
            <summary>
            Configure on change behavior
            </summary>
            <param name="boardId">Board Id</param>
            <param name="index">Index</param>
            <param name="onChangeBehavior">On change behavior</param>
        </member>
        <member name="M:NTL_HIL.Refrigeration.DefineMemoryMappedVariable(System.Byte,System.Byte[])">
            <summary>
            Define memory mapped variable
            </summary>
            <param name="boardId">Board Id</param>
            <param name="listofMemoryMapVariable">List of memory map variable</param>
        </member>
        <member name="M:NTL_HIL.Refrigeration.DeselectAllVariables(System.Byte)">
            <summary>
            Deselect all variables
            </summary>
            <param name="boardId">Board id</param>
        </member>
        <member name="M:NTL_HIL.Refrigeration.DeselectSpecificVariables(System.Byte,System.Byte[])">
            <summary>
            Deselect specific variabes
            </summary>
            <param name="boardId">Board id</param>
            <param name="listofVariables">List of vaiables</param>
        </member>
        <member name="M:NTL_HIL.Refrigeration.EnablePeriodicData(System.Byte,System.Byte)">
            <summary>
            Enable periodic data
            </summary>
            <param name="boardId">Board id</param>
            <param name="startStop">Start/Stop</param>
        </member>
        <member name="M:NTL_HIL.Refrigeration.RequestAcquisitionConfiguration(System.Byte)">
            <summary>
            Request acquisition configuration
            </summary>
            <param name="boardId">Board id</param>
        </member>
        <member name="M:NTL_HIL.Refrigeration.RequestFixedVariableMetadata(System.Byte,System.Byte)">
            <summary>
            Request fixed vairable metadata
            </summary>
            <param name="boardId">Board id</param>
            <param name="index">Index</param>
        </member>
        <member name="M:NTL_HIL.Refrigeration.RequestNumberOfVariables(System.Byte)">
            <summary>
            Request number of variable
            </summary>
            <param name="boardId">Board id</param>
        </member>
        <member name="M:NTL_HIL.Refrigeration.SelectAllVariables(System.Byte)">
            <summary>
            Select all variables
            </summary>
            <param name="boardId">Board id</param>
        </member>
        <member name="M:NTL_HIL.Refrigeration.SelectSpecificVariables(System.Byte,System.Byte[])">
            <summary>
            Select specific variables
            </summary>
            <param name="boardId">Board id</param>
            <param name="listofVariables">List of variables</param>
        </member>
        <member name="M:NTL_HIL.Refrigeration.SetPeriodicPublication(System.Byte,System.Byte,System.Byte)">
            <summary>
            Set periodic publication
            </summary>
            <param name="boardId">Board id</param>
            <param name="method">Method</param>
            <param name="millisecondPeriod">Time in millisecseonds</param>
        </member>
        <member name="M:NTL_HIL.Refrigeration.UndefineMemoryMappedVariable(System.Byte,System.Byte[])">
            <summary>
            Undefine memory mapped variable
            </summary>
            <param name="boardId">Board id</param>
            <param name="listofMemoryMapVariable">List of memory map variable</param>
        </member>
        <member name="M:NTL_HIL.Refrigeration.WriteFixedVariable(System.Byte,System.Byte[])">
            <summary>
            Write fixed varaibles
            </summary>
            <param name="boardId">Board id</param>
            <param name="listofMemoryMapVariable">List of memory map variable</param>
        </member>
        <member name="T:NTL_HIL.VAWasher">
            <summary>
            
            </summary>
            <summary>
            
            </summary>
        </member>
        <member name="M:NTL_HIL.VAWasher.RequestApplianceData(System.Byte)">
            <summary>
            Gets the appliancedata
            </summary>
            <param name="boardId">Board Id</param>
            <returns></returns>
        </member>
        <member name="M:NTL_HIL.VAWasher.RequestBoardData(System.Byte,System.Byte)">
            <summary>
            Gets the board data
            </summary>
            <param name="boardId">Board Id</param>
            <param name="boardIndex">Board Index</param>
            <returns></returns>
        </member>
        <member name="M:NTL_HIL.VAWasher.RequestProjectData(System.Byte,System.Byte,System.Byte)">
            <summary>
            Gets the project data
            </summary>
            <param name="boardId">Board Id</param>
            <param name="boardIndex">Index of the board</param>
            <param name="projectIndex">Index of the project</param>
            <returns></returns>
        </member>
        <member name="M:NTL_HIL.VAWasher.RequestServiceData(System.Byte,System.Int32)">
            <summary>
            
            </summary>
            <param name="boardId"></param>
            <param name="waitTimeInSec"></param>
            <returns></returns>
        </member>
        <member name="M:NTL_HIL.VAWasher.RequestEolData(System.Byte,System.Byte,System.Int32)">
            <summary>
            
            </summary>
            <param name="boardId"></param>
            <param name="eolIndex"></param>
            <param name="waitTimeInSec"></param>
            <returns></returns>
        </member>
        <member name="M:NTL_HIL.VAWasher.RequestFVTData(System.Byte,System.Byte,System.Int32)">
            <summary>
            
            </summary>
            <param name="boardId"></param>
            <param name="fvtIndex"></param>
            <param name="waitTimeInSec"></param>
            <returns></returns>
        </member>
        <member name="M:NTL_HIL.VAWasher.RequestClassBSignature(System.Byte,System.Int32)">
            <summary>
            
            </summary>
            <param name="boardId"></param>
            <param name="waitTimeInSec"></param>
            <returns></returns>
        </member>
        <member name="M:NTL_HIL.VAWasher.RequestCalibrationData(System.Byte,System.Byte,System.Int32)">
            <summary>
            
            </summary>
            <param name="boardId"></param>
            <param name="calibrationDataId"></param>
            <param name="waitTimeInSec"></param>
            <returns></returns>
        </member>
        <member name="M:NTL_HIL.VAWasher.SetBoardData(System.Byte,System.Byte,System.String,System.String,System.String,System.Byte,System.Byte)">
            <summary>
            Sets the board data
            </summary>
            <param name="boardId">Board Id</param>
            <param name="boardIndex">Board index</param>
            <param name="boardPartNumber">Board part number</param>
            <param name="boardRevision">Board revision</param>
            <param name="boardSerialNumber">Board serial number</param>
            <param name="boardReplacment">Board replacement</param>
            <param name="boardNumberOfProjects">Number of projects</param>
        </member>
        <member name="M:NTL_HIL.VAWasher.SetEolData(System.Byte,System.Byte,System.Byte,System.String,System.String,System.String)">
            <summary>
            Sets the eol data
            </summary>
            <param name="boardId">Board Id</param>
            <param name="eolIndex">EOL index</param>
            <param name="eolId">EOL Id</param>
            <param name="eolTesterVersion">EOL test version</param>
            <param name="eolTestDate">EOL test date</param>
            <param name="eolTestResult">EOL test result</param>
        </member>
        <member name="M:NTL_HIL.VAWasher.SetEolDataBytes(System.Byte,System.Byte,System.String,System.String)">
            <summary>
            Sets the eol data bytes
            </summary>
            <param name="boardId">Board Id</param>
            <param name="eolIndex">EOL index</param>
            <param name="eolTestResult">EOL test result</param>
            <param name="eolTestResultMask">EOL test result mask</param>
        </member>
        <member name="M:NTL_HIL.VAWasher.SetFvtData(System.Byte,System.Byte,System.Byte,System.String,System.String,System.String)">
            <summary>
            Sets the FVT data
            </summary>
            <param name="boardId">Board Id</param>
            <param name="fvtIndex">FVT index</param>
            <param name="fvtId">FVT Id</param>
            <param name="fvtTesterVersion">FVT test version</param>
            <param name="fvtTestDate">FVT test date</param>
            <param name="fvtTestResult">FVT test result</param>
        </member>
        <member name="M:NTL_HIL.VAWasher.SetFvtDataBytes(System.Byte,System.Byte,System.String,System.String)">
            <summary>
            Sets the FVT data bytes
            </summary>
            <param name="boardId">Board Id</param>
            <param name="fvtIndex">FVT index</param>
            <param name="fvtTestResult">FVT test result</param>
            <param name="fvtTestResultMask">FVT test result mask</param>
        </member>
        <member name="M:NTL_HIL.VAWasher.SetServiceData(System.Byte,System.Byte,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Sets the serice data
            </summary>
            <param name="boardId">Board Id</param>
            <param name="serviceTesterId">Service tester Id</param>
            <param name="serviceTesterVersion">Service tester version</param>
            <param name="serviceTestDate">Service tester date</param>
            <param name="serviceTestAge">Service test age</param>
            <param name="serviceTestDuration">Service test duration</param>
            <param name="serviceTestResult">Service test result</param>
        </member>
        <member name="M:NTL_HIL.VAWasher.StoreStaticData(System.Byte)">
            <summary>
            Stores the staticdata
            </summary>
            <param name="boardId">Board Id</param>
        </member>
        <member name="M:NTL_HIL.VAWasher.SetApplianceData(System.Byte,System.String,System.String,System.Byte)">
            <summary>
            Sets the appliance data
            </summary>
            <param name="boardId">Board Id</param>
            <param name="modelNumber">Model number</param>
            <param name="serialNumber">Serial number</param>
            <param name="numberOfBoards">Number of boards</param>
        </member>
        <member name="T:NTL_HIL.VAWasher.BPMSystemVaraibale">
            <summary>
            
            </summary>
        </member>
        <member name="T:NTL_HIL.VAWasher.PSCSensorSystemVariable">
            <summary>
            
            </summary>
        </member>
        <member name="T:NTL_HIL.VAWasher.PSCSensorlessSystemVariable">
            <summary>
            
            </summary>
        </member>
        <member name="T:NTL_HIL.VAWasher.DataType">
            <summary>/// /// </summary>
        </member>
        <member name="F:NTL_HIL.VAWasher.DataType.U8">
            <summary>/// /// </summary>
        </member>
        <member name="F:NTL_HIL.VAWasher.DataType.U16">
            <summary>/// /// </summary>
        </member>
        <member name="F:NTL_HIL.VAWasher.DataType.U32">
            <summary>/// /// </summary>
        </member>
        <member name="F:NTL_HIL.VAWasher.DataType.U64">
            <summary>/// /// </summary>
        </member>
        <member name="F:NTL_HIL.VAWasher.DataType.S8">
            <summary>/// /// </summary>
        </member>
        <member name="F:NTL_HIL.VAWasher.DataType.S16">
            <summary>/// /// </summary>
        </member>
        <member name="F:NTL_HIL.VAWasher.DataType.S32">
            <summary>/// /// </summary>
        </member>
        <member name="F:NTL_HIL.VAWasher.DataType.S64">
            <summary>/// /// </summary>
        </member>
        <member name="M:NTL_HIL.VAWasher.RequestSpecificVariable(System.Byte,System.Byte,System.Int32)">
            <summary>
            Get specific variable
            </summary>
            <param name="boardId">Board Id</param>
            <param name="index">Index</param>
            <param name="waitTimeInSec">Time in secs</param>
            <returns>Byte array</returns>
        </member>
        <member name="M:NTL_HIL.VAWasher.RequestSpecificVariable(System.Byte,System.Byte,NTL_HIL.VAWasher.DataType,System.Byte)">
            <summary>
            Request specific variable as per varibale id
            </summary>
            <param name="boardId">ACU node ID</param>
            <param name="variableId">Variable name from NKMParser.dll</param>
            <param name="offset">Position of the expected data</param>
            <param name="dataType">Data type</param>
            <returns>Returns array if offset is not provided or wrong offset provided\nReturns single value when offset sent withing limits</returns>
        </member>
        <member name="M:NTL_HIL.VAWasher.GetData(System.Byte[],System.Byte,System.Byte)">
            <summary>
            
            </summary>
            <param name="payload"></param>
            <param name="offset"></param>
            <param name="numberOfBytes"></param>
            <returns></returns>
        </member>
        <member name="M:NTL_HIL.VAWasher.RequestSpecificVariable(System.String)">
            <summary>
            
            </summary>
            <param name="variablename"></param>
            <returns></returns>
        </member>
        <member name="M:NTL_HIL.VAWasher.ReadSelectedVariableXML(System.String)">
            <summary>
            
            </summary>
            <param name="path"></param>
        </member>
        <member name="M:NTL_HIL.VAWasher.RegisterVariables">
            <summary>
            
            </summary>
        </member>
        <member name="M:NTL_HIL.VAWasher.RegisterVariables(System.UInt32[])">
            <summary>
            
            </summary>
            <param name="exclusivelist"></param>
        </member>
        <member name="M:NTL_HIL.VAWasher.PublishAcquisitionConfiguration(System.Byte,System.Int32)">
            <summary>
            Publish acquisition configuration
            </summary>
            <param name="boardId">Board Id</param>
            <param name="waitTimeInSec">Time in secs</param>
            <returns>Byte array</returns>
        </member>
        <member name="M:NTL_HIL.VAWasher.PublishFixedVariableMedata(System.Byte,System.Byte,System.Int32)">
            <summary>
            Publish fixed variable metadata
            </summary>
            <param name="boardId">Board Id</param>
            <param name="waitTimeInSec">Time in secs</param>
            <param name="index">Index</param>
            <returns>Byte array</returns>
        </member>
        <member name="M:NTL_HIL.VAWasher.PublishStreamData(System.Byte,System.Byte,System.Byte,System.Int32)">
            <summary>
            
            </summary>
            <param name="boardId"></param>
            <param name="lsb"></param>
            <param name="msb"></param>
            <param name="waitTimeInSec"></param>
            <returns></returns>
        </member>
        <member name="M:NTL_HIL.VAWasher.PublishNumberOfVariables(System.Byte,System.Int32)">
            <summary>
            Publish number of variables
            </summary>
            <param name="boardId">Board Id</param>
            <param name="waitTimeInSec">Time in secs</param>
            <returns>Byte array</returns>
        </member>
        <member name="M:NTL_HIL.VAWasher.ConfigureOnChangeBehavior(System.Byte,System.Byte,System.Byte)">
            <summary>
            Configure on change behavior
            </summary>
            <param name="boardId">Board Id</param>
            <param name="index">Index</param>
            <param name="onChangeBehavior">On change behavior</param>
        </member>
        <member name="M:NTL_HIL.VAWasher.DefineMemoryMappedVariable(System.Byte,System.Byte[])">
            <summary>
            Define memory mapped variable
            </summary>
            <param name="boardId">Board Id</param>
            <param name="listofMemoryMapVariable">List of memory map variable</param>
        </member>
        <member name="M:NTL_HIL.VAWasher.DeselectAllVariables(System.Byte)">
            <summary>
            Deselect all variables
            </summary>
            <param name="boardId">Board id</param>
        </member>
        <member name="M:NTL_HIL.VAWasher.DeselectSpecificVariables(System.Byte,System.Byte[])">
            <summary>
            Deselect specific variabes
            </summary>
            <param name="boardId">Board id</param>
            <param name="listofVariables">List of vaiables</param>
        </member>
        <member name="M:NTL_HIL.VAWasher.EnablePeriodicData(System.Byte,System.Byte)">
            <summary>
            Enable periodic data
            </summary>
            <param name="boardId">Board id</param>
            <param name="startStop">Start/Stop</param>
        </member>
        <member name="M:NTL_HIL.VAWasher.RequestAcquisitionConfiguration(System.Byte)">
            <summary>
            Request acquisition configuration
            </summary>
            <param name="boardId">Board id</param>
        </member>
        <member name="M:NTL_HIL.VAWasher.RequestFixedVariableMetadata(System.Byte,System.Byte)">
            <summary>
            Request fixed vairable metadata
            </summary>
            <param name="boardId">Board id</param>
            <param name="index">Index</param>
        </member>
        <member name="M:NTL_HIL.VAWasher.RequestNumberOfVariables(System.Byte)">
            <summary>
            Request number of variable
            </summary>
            <param name="boardId">Board id</param>
        </member>
        <member name="M:NTL_HIL.VAWasher.SelectAllVariables(System.Byte)">
            <summary>
            Select all variables
            </summary>
            <param name="boardId">Board id</param>
        </member>
        <member name="M:NTL_HIL.VAWasher.SelectSpecificVariables(System.Byte,System.Byte[])">
            <summary>
            Select specific variables
            </summary>
            <param name="boardId">Board id</param>
            <param name="listofVariables">List of variables</param>
        </member>
        <member name="M:NTL_HIL.VAWasher.SetPeriodicPublication(System.Byte,System.Byte,System.Byte)">
            <summary>
            Set periodic publication
            </summary>
            <param name="boardId">Board id</param>
            <param name="method">Method</param>
            <param name="millisecondPeriod">Time in millisecseonds</param>
        </member>
        <member name="M:NTL_HIL.VAWasher.UndefineMemoryMappedVariable(System.Byte,System.Byte[])">
            <summary>
            Undefine memory mapped variable
            </summary>
            <param name="boardId">Board id</param>
            <param name="listofMemoryMapVariable">List of memory map variable</param>
        </member>
        <member name="M:NTL_HIL.VAWasher.WriteFixedVariable(System.Byte,System.Byte[])">
            <summary>
            Write fixed varaibles
            </summary>
            <param name="boardId">Board id</param>
            <param name="listofMemoryMapVariable">List of memory map variable</param>
        </member>
        <member name="M:NTL_HIL.VAWasher.ProductTypes(System.IO.Stream)">
            <summary>
            Read NKM XML file and get product type
            </summary>
            <param name="XMLStream">XML file</param>
            <returns>Product type refernce containing all data</returns>
        </member>
        <member name="M:NTL_HIL.VAWasher.PilotType(System.IO.Stream)">
            <summary>
            Read NKM XML file and get pilot type
            </summary>
            <param name="XMLStream">XML file</param>
            <returns>Pilot type refernce containing all data</returns>
        </member>
        <member name="M:NTL_HIL.VAWasher.LoadsList(System.IO.Stream)">
            <summary>
            Read NKM XML file and get load list
            </summary>
            <param name="XMLStream">XML file</param>
            <returns>Load list refernce containing all data</returns>
        </member>
        <member name="M:NTL_HIL.VAWasher.LowLevelInputList(System.IO.Stream)">
            <summary>
            Read NKM XML file and get low level input info
            </summary>
            <param name="XMLStream">XML file</param>
            <returns>Low level input info refernce containing all data</returns>
        </member>
        <member name="M:NTL_HIL.VAWasher.GenericInputList(System.IO.Stream)">
            <summary>
            Read NKM XML file and get generic input info
            </summary>
            <param name="XMLStream">XML file</param>
            <returns>Generic input info refernce containing all data</returns>
        </member>
        <member name="M:NTL_HIL.VAWasher.RegulationsList(System.IO.Stream)">
            <summary>
            Read NKM XML file and regulations list
            </summary>
            <param name="XMLStream">XML file</param>
            <returns>Regulations list refernce containing all data</returns>
        </member>
        <member name="M:NTL_HIL.VAWasher.CyclesList(System.IO.Stream)">
            <summary>
            Read NKM XML file and cycles list
            </summary>
            <param name="XMLStream">XML file</param>
            <returns>Cycles list refernce containing all data</returns>
        </member>
        <member name="M:NTL_HIL.VAWasher.FaultsList(System.IO.Stream)">
            <summary>
            Read NKM XML file and fault list
            </summary>
            <param name="XMLStream">XML file</param>
            <returns>Fault list refernce containing all data</returns>
        </member>
        <member name="M:NTL_HIL.VAWasher.SetLoad(System.Byte,NTL_HIL.VAWasher.LOADID,NTL_HIL.NTL_HIL.SetState,System.Byte)">
            <summary>
            Low level interface : to control specific load provided as per parameters
            Opcode 0x01
            </summary>
            <param name="boardId">Board node id</param>
            <param name="loadName">Load name. For example : loadName = Laundry.LOADID.DLB1 for DLB1, Laundry.LOADID.Bake1 for Bake1</param>
            <param name="state">Load state. For example : state = Laundry.SETSTATE.ON, Laundry.SETSTATE.OFF</param>
            <param name="loadSize">Load size</param>
            <remarks></remarks>
        </member>
        <member name="M:NTL_HIL.VAWasher.SetLoad(System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Low level interface : to control specific load provided as per parameters
            Opcode 0x01
            </summary>
            <param name="boardId">Board node id</param>
            <param name="loadId">Load id by index</param>
            <param name="loadSize">Load size</param>
            <param name="state">Load state</param>
        </member>
        <member name="M:NTL_HIL.VAWasher.GetLoadData(System.Byte,System.Byte,System.Int32)">
            <summary>
            API Low level : get load data
            Opcode 0x02
            </summary>
            <param name="boardId">Board id</param>
            <param name="loadId">Load id by index</param>
            <param name="waitTimeInSec">Time in secs</param>
            <returns>Byte array</returns>
        </member>
        <member name="M:NTL_HIL.VAWasher.GetLoadData(System.Byte,NTL_HIL.VAWasher.LOADID)">
            <summary>
            API Low level : get load data
            Opcode 0x02
            </summary>
            <param name="boardId">Board id</param>
            <param name="loadName">Load name. For example : loadName = Laundry.LOADID.DLB1 for DLB1, Laundry.LOADID.Bake1 for Bake1</param>
            <returns>Byte array</returns>
        </member>
        <member name="M:NTL_HIL.VAWasher.RequestLliData(System.Byte,System.Byte,System.Byte,System.Int32)">
            <summary>
            Gets the lli data
            Opocode 0x03
            </summary>
            <param name="boardId">The boardId</param>
            <param name="lliType">Type of the lli</param>
            <param name="lliPosition">The lli position</param>
            <param name="waitTimeInSec">Time in secs</param>
            <returns>Byte array</returns>
        </member>
        <member name="M:NTL_HIL.VAWasher.RequestGIData(System.Byte,System.Byte,System.Int32)">
            <summary>
            Gets the gi data
            Opocode 0x04
            </summary>
            <param name="boardId">The boardId</param>
            <param name="giID">The gi identifier</param>
            <param name="waitTimeInSec">Time in secs</param>
            <returns>Byte array</returns>
        </member>
        <member name="M:NTL_HIL.VAWasher.RequestAllLoadConfiguration(System.Byte,System.Int32)">
            <summary>
            Not validated
            Opocode 0x05
            </summary>
            <param name="boardId">Board Id</param>
            <param name="waitTimeInSec">Time in secs</param>
            <returns></returns>
        </member>
        <member name="M:NTL_HIL.VAWasher.RequestAllLliConfiguration(System.Byte,System.Int32)">
            <summary>
            Not validated
            Opocode 0x06
            </summary>
            <param name="boardId">Board Id</param>
            <param name="waitTimeInSec">Time in secs</param>
            <returns></returns>
        </member>
        <member name="M:NTL_HIL.VAWasher.RequestAllGiConfiguration(System.Byte,System.Int32)">
            <summary>
            Not validated
            Opocode 0x07
            </summary>
            <param name="boardId">Board Id</param>
            <param name="waitTimeInSec">Time in secs</param>
            <returns></returns>
        </member>
        <member name="M:NTL_HIL.VAWasher.TurnAllLoadsOff(System.Byte)">
            <summary>
            Sets all load off
            Opocode 0x11
            </summary>
            <param name="boardId">Board id</param>
            <returns></returns>
        </member>
        <member name="M:NTL_HIL.VAWasher.SetDebugLabel(System.Byte,System.Byte,System.String)">
            <summary>
            Sets the debuglabel
            Opocode 0x12
            </summary>
            <param name="boardId">The boardId</param>
            <param name="debugFunctionIndex">Index of the debug function</param>
            <param name="label">The label</param>
            <returns></returns> 
        </member>
        <member name="M:NTL_HIL.VAWasher.EngageTestCycle(System.Byte,System.Byte)">
            <summary>
            Not validated
            Opocode 0x1B
            </summary>
            <param name="boardId"></param>
            <param name="testCycle"></param>
        </member>
        <member name="M:NTL_HIL.VAWasher.HmiPlaySound(System.Byte,System.Byte,System.Byte)">
            <summary>
            Not validated
            Opocode 0x15
            </summary>
            <param name="boardId"></param>
            <param name="soundIndex"></param>
            <param name="volume"></param>
        </member>
        <member name="M:NTL_HIL.VAWasher.HmiSetObject(System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Not validated
            Opocode 0x14
            </summary>
            <param name="boardId"></param>
            <param name="objectType"></param>
            <param name="objectIndex"></param>
            <param name="objectValue"></param>
        </member>
        <member name="M:NTL_HIL.VAWasher.PhaseTestCycle(System.Byte,System.Byte)">
            <summary>
            Not validated
            Opocode 0x1C
            </summary>
            <param name="boardId"></param>
            <param name="testPhaseCycle"></param>
        </member>
        <member name="M:NTL_HIL.VAWasher.SetDebugVariable(System.Byte,System.Byte,System.Byte[])">
            <summary>
            Not validated
            Opocode 0x13
            </summary>
            <param name="boardId"></param>
            <param name="debugFunctionIndex"></param>
            <param name="varaiableValue"></param>
        </member>
        <member name="M:NTL_HIL.VAWasher.SetExtractGIs(System.Byte,System.Byte)">
            <summary>
            Not validated
            Opocode 0x1E
            </summary>
            <param name="boardId"></param>
            <param name="extractGIsState"></param>
        </member>
        <member name="M:NTL_HIL.VAWasher.SetExtractLoads(System.Byte,System.Byte)">
            <summary>
            Not validated
            Opocode 0x1D
            </summary>
            <param name="boardId"></param>
            <param name="extractLoadState"></param>
        </member>
        <member name="M:NTL_HIL.VAWasher.SetTestStorage(System.Byte,System.Byte)">
            <summary>
            Not validated
            Opocode 0x1A
            </summary>
            <param name="boardId"></param>
            <param name="storage"></param>
        </member>
        <member name="P:NTL_HIL.VAWasher.Target">
            <summary>
            
            </summary>
        </member>
        <member name="T:NTL_HIL.VAWasher.LOADID">
            <summary>
            
            </summary>
        </member>
        <member name="T:NTL_HIL.VAWasher.Regulation">
            <summary>
            
            </summary>
        </member>
        <member name="M:NTL_HIL.VAWasher.SetExternalControl">
            <summary>
            API 11 : Uses API 11 to set acu to external control to be controlled by PC
            </summary>
        </member>
        <member name="M:NTL_HIL.VAWasher.SetRegulation(System.Byte,System.Byte,System.Byte[])">
            <summary>
            Set regulation
            </summary>
            <param name="boardId">Board Id</param>
            <param name="regulationId">Regulation Id</param>
            <param name="param">Parameters required to set regulation</param>
        </member>
        <member name="M:NTL_HIL.VAWasher.SetRegulation(System.Byte,System.Byte[])">
            <summary>
            
            </summary>
            <param name="target"></param>
            <param name="param"></param>
        </member>
        <member name="M:NTL_HIL.VAWasher.Init(System.String,System.Byte)">
            <summary>
            Setting and initializing communication port
            </summary>
            <param name="comPort">Port name by which CCB2 device is connected</param>
            <param name="deviceAddress">Device address to set</param>
        </member>
        <member name="M:NTL_HIL.VAWasher.GetRegulationsData(System.Byte,System.Int32)">
            <summary>
            Gets the regulations data
            </summary>
            <param name="boardId">The target</param>
            <param name="waitTimeInSec">Time in secs</param>
            <returns>Byte array</returns>
        </member>
        <member name="M:NTL_HIL.VAWasher.GetNumberOfCycle(System.Byte,System.Int32)">
            <summary>
            Gets the number of cycle
            </summary>
            <param name="boardId">The target</param>
            <param name="waitTimeInSec">Time in secs</param>
            <returns>Byte</returns>
        </member>
        <member name="M:NTL_HIL.VAWasher.GetRegulationById(System.Byte,System.Byte,System.Int32)">
            <summary>
            Gets the regulation by identifier
            </summary>
            <param name="boardId">The target</param>
            <param name="functionId">The function identifier</param>
            <param name="waitTimeInSec">Time in secs</param>
            <returns>Byte</returns>
        </member>
        <member name="M:NTL_HIL.VAWasher.GetStatusData(System.Byte,System.Int32)">
            <summary>
            Gets the status data
            </summary>
            <param name="boardId">The target</param>
            <param name="waitTimeInSec">Time in secs</param>
            <returns>Byte array</returns>
        </member>
        <member name="M:NTL_HIL.VAWasher.GetSystemMode(System.Byte,System.Int32)">
            <summary>
            Get system mode
            </summary>
            <param name="boardId">Board Id</param>
            <param name="waitTimeInSec">Time in secs</param>
            <returns></returns>
        </member>
        <member name="M:NTL_HIL.VAWasher.GetStatusStructure(System.Byte,System.Int32)">
            <summary>
            Gets the status structure
            </summary>
            <param name="boardId">The target</param>
            <param name="waitTimeInSec">Time in secs</param>
            <returns>Byte array</returns>
        </member>
        <member name="M:NTL_HIL.VAWasher.SetSystemMode(System.Byte,NTL.EnumModeType,NTL.EnumSubModeType)">
            <summary>
            Sets the system mode.
            </summary>
            <param name="target">The target.</param>
            <param name="mode">The mode.</param>
            <param name="subMode">The sub mode.</param>
        </member>
        <member name="M:NTL_HIL.VAWasher.StartLog(System.String)">
            <summary>
            
            </summary>
            <param name="path"></param>
        </member>
        <member name="M:NTL_HIL.VAWasher.StopLog">
            <summary>
            
            </summary>
        </member>
        <member name="M:NTL_HIL.VAWasher.SendRevealMessage(System.Byte,System.Byte[],System.Boolean,System.Double)">
            <summary>
            Sends raw reveal message on bus
            </summary>
            <param name="boardId">Board id</param>
            <param name="data">Packet to send on bus</param>
            <param name="blockingExecution">Optional parameter</param>
            <param name="timeout">Optional parameter</param>
            <returns>Returns bool</returns>
        </member>
        <member name="M:NTL_HIL.VAWasher.ReadClientData(WhirlpoolCommunication.Packets.SimpleWhirlpoolPacket,System.Int32,WhirlpoolCommunication.Packets.SimpleWhirlpoolPacket)">
            <summary>
            
            </summary>
            <param name="desiredData"></param>
            <param name="waitTimeInSec"></param>
            <param name="maskData"></param>
            <returns></returns>
        </member>
        <member name="M:NTL_HIL.VAWasher.ReadClientData(WhirlpoolCommunication.Packets.SimpleWhirlpoolPacket,WhirlpoolCommunication.Packets.SimpleWhirlpoolPacket)">
            <summary>
            
            </summary>
            <param name="desiredData"></param>
            <param name="maskData"></param>
            <returns></returns>
        </member>
        <member name="M:NTL_HIL.VAWasher.ReadClientDataLatest(WhirlpoolCommunication.Packets.SimpleWhirlpoolPacket,System.Int32)">
            <summary>
            
            </summary>
            <param name="desiredData"></param>
            <param name="waitTimeInSec"></param>
            <returns></returns>
        </member>
        <member name="M:NTL_HIL.VAWasher.ReadClientDataLatest(WhirlpoolCommunication.Packets.SimpleWhirlpoolPacket,WhirlpoolCommunication.Packets.SimpleWhirlpoolPacket,System.Int32)">
            <summary>
            
            </summary>
            <param name="desiredData"></param>
            <param name="maskData"></param>
            <param name="waitTimeInSec"></param>
            <returns></returns>
        </member>
        <member name="T:WiredLibrary.WiredLib">
            <summary>
            
            </summary>
        </member>
        <member name="P:WiredLibrary.WiredLib.TXINTERVAL">
            <summary>        /// /// </summary>
        </member>
        <member name="P:WiredLibrary.WiredLib.COMPORT">
            <summary>        /// /// </summary>
        </member>
        <member name="P:WiredLibrary.WiredLib.DEVICEADDRESS">
            <summary>        /// /// </summary>
        </member>
        <member name="P:WiredLibrary.WiredLib.BUSPROTOCOL">
            <summary>        /// /// </summary>
        </member>
        <member name="P:WiredLibrary.WiredLib.WBOXMODE">
            <summary>        /// /// </summary>
        </member>
        <member name="M:WiredLibrary.WiredLib.Init(System.String,WideBoxLib.WideBox.BUS_PROTOCOL,System.Byte,WideBoxLib.WBoxService.WBOX_MODE)">
            <summary>
            
            </summary>
            <param name="comPort"></param>
            <param name="busProtocol"></param>
            <param name="deviceAddress"></param>
            <param name="wBoxMode"></param>
            <returns></returns>
        </member>
        <member name="M:WiredLibrary.WiredLib.#ctor(WideBoxLib.WideBox)">
            <summary>
             Constructor
            </summary>
        </member>
        <member name="M:WiredLibrary.WiredLib.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:WiredLibrary.WiredLib.Configure(System.Byte[],System.Byte[])">
            <summary>
            Method to configure BUS
            </summary>
            <param name="plist">Pool list : Optional parameter used for WIDE bus protocol</param>
            <param name="nlist">Node list : Optional parameter used for WIDE bus protocol</param>
            <returns></returns>
        </member>
        <member name="M:WiredLibrary.WiredLib.WiredLibMultiInstance">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:WiredLibrary.WiredLib.AddBusDataIntoList">
            <summary>
            
            </summary>
        </member>
        <member name="M:WiredLibrary.WiredLib.WiredLib_Message">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:WiredLibrary.WiredLib.AddBusDataIntoLogFile(WhirlpoolCommunication.Packets.IMessage)">
            <summary>
            
            </summary>
            <param name="swp"></param>
        </member>
        <member name="M:WiredLibrary.WiredLib.ReadClientDataLatest(WhirlpoolCommunication.Packets.SimpleWhirlpoolPacket,WhirlpoolCommunication.Packets.SimpleWhirlpoolPacket,System.Int32)">
            <summary>
            Reads data from buffer.
            Returns data only if Client is initialised and desiredData is in buffer
            The data will be searched from latest to old (Last in first Out)
            </summary>
            <param name="desiredData">Expected Data to look into client buffer</param>
            <param name="waitTimeInSec">Time in seconds to wait for desired data, before starting the search default is 5 seconds</param>
            <param name="maskData">Mask data, Set 0 (Zero) to ignore</param>
            <returns>null if data not found in buffer</returns>
        </member>
        <member name="M:WiredLibrary.WiredLib.ReadClientDataLatest(WhirlpoolCommunication.Packets.SimpleWhirlpoolPacket,System.Int32)">
            <summary>
            Reads data from buffer.
            Returns data only if Client is initialised and desiredData is in buffer
            The data will be searched from latest to old (Last in first Out)
            Look for exact desired packet in buffers as supplied with desiredData
            </summary>
            <param name="desiredData">Expected Data to look into client buffer</param>
            <param name="waitTimeInSec">Time in seconds to wait for desired data, before starting the search default is 5 seconds</param>
            <returns>null if data not found in buffer</returns>
        </member>
        <member name="M:WiredLibrary.WiredLib.ReadClientData(WhirlpoolCommunication.Packets.SimpleWhirlpoolPacket,System.Int32,WhirlpoolCommunication.Packets.SimpleWhirlpoolPacket)">
            <summary>
            Reads data from buffer.
            Returns data only if Client is initialised and desiredData is in buffer
            </summary>
            <param name="desiredData">Expected Data to look into client buffer</param>
            <param name="waitTimeInSec">Time in seconds to wait for desired data, default is 2 seconds</param>
            <param name="maskData">Mask data, Set 0 (Zero) to ignore</param>
            <returns>null if data not found in buffer</returns>
        </member>
        <member name="M:WiredLibrary.WiredLib.ReadClientData(WhirlpoolCommunication.Packets.SimpleWhirlpoolPacket,WhirlpoolCommunication.Packets.SimpleWhirlpoolPacket)">
            <summary>
            Reads data from buffer.
            Returns data only if Client is initialised and desiredData is in buffer
            Keep waiting for 5 seconds for desiredData, for legacy compatibility.
            </summary>
            <param name="desiredData">Expected Data to look into client buffer</param>
            <param name="maskData">Mask data, Set 0 (Zero) to ignore</param>
            <returns>null if data not found in buffer</returns>
        </member>
        <member name="M:WiredLibrary.WiredLib.GetClientData(WhirlpoolCommunication.Packets.SimpleWhirlpoolPacket,WhirlpoolCommunication.Packets.SimpleWhirlpoolPacket,System.Boolean)">
            <summary>
            Gets the client data.
            Return data only if client was Initialized and the desiredMessageSpec is in the buffer.
            </summary>
            <param name="desiredMessageSpec">The desired message specification.</param>
            <param name="desiredMessageSpecMask">The desired message spec mask. Set 0 to parts of the message to ignore.</param>
            <param name="fifo">Direction to search the packet in buffer default is fifo = true, can use fifo = false.</param>
            <returns>returns the message packet if desiredMessageSpec available in buffer else null</returns>
        </member>
        <member name="M:WiredLibrary.WiredLib.CompareSWPacketsMasked(WhirlpoolCommunication.Packets.ExtendedSimpleWhirlpoolPacket,WhirlpoolCommunication.Packets.SimpleWhirlpoolPacket,WhirlpoolCommunication.Packets.SimpleWhirlpoolPacket)">
            <summary>
            
            </summary>
            <param name="receivedMessage"></param>
            <param name="desiredMessageSpec"></param>
            <param name="desiredMessageSpecMask"></param>
            <returns></returns>
        </member>
        <member name="M:WiredLibrary.WiredLib.CreateNullMask(WhirlpoolCommunication.Packets.SimpleWhirlpoolPacket)">
            <summary>
            
            </summary>
            <param name="desiredMessageSpec"></param>
            <returns></returns>
        </member>
        <member name="M:WiredLibrary.WiredLib.SendBusMessage(System.Byte,System.Byte,System.Byte[],System.Boolean,System.Double)">
            <summary>
            
            </summary>
            <param name="address"></param>
            <param name="sap"></param>
            <param name="data"></param>
            <param name="blockingExecution"></param>
            <param name="timeout"></param>
            <returns></returns>
        </member>
        <member name="M:WiredLibrary.WiredLib.StartLog(System.String)">
            <summary>
            Intiate Simple Whirlpool Message Log
            </summary>
            <param name="path"> Location of log as "C:\\MyLogs\\" or @"C:\MyLogs\", default is current location</param>
        </member>
        <member name="M:WiredLibrary.WiredLib.StopLog">
            <summary>
            Request to stop logging
            </summary>
        </member>
        <member name="M:WiredLibrary.WiredLib.StopThread">
            <summary>
            
            </summary>
        </member>
        <member name="M:WiredLibrary.WiredLib.WaitForDuration(System.UInt32)">
            <summary>
            
            </summary>
        </member>
    </members>
</doc>
